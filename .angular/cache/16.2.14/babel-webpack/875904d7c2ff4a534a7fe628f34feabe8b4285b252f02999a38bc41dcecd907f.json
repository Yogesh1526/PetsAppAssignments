{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { BaseService } from './BaseService.services';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PetBreedService extends BaseService {\n  constructor(http) {\n    super(http);\n    this.http = http;\n  }\n  getPetBreed(petBreedId) {\n    return this.get(`petbreeds/${petBreedId}`).pipe(map(response => response.data), catchError(this.handleError));\n  }\n  getAllPetBreeds() {\n    return this.get('petbreed').pipe(map(response => response.data), catchError(this.handleError));\n  }\n  createPetBreed(petBreed) {\n    return this.post('petbreed', petBreed).pipe(map(response => response.data), catchError(this.handleError));\n  }\n  updatePetBreed(petBreed) {\n    return this.put(`petbreeds/${petBreed.id}`, petBreed).pipe(map(response => response.data), catchError(this.handleError));\n  }\n  deletePetBreed(petBreedId) {\n    return this.delete(`petbreeds/${petBreedId}`).pipe(map(response => response.data), catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function PetBreedService_Factory(t) {\n    return new (t || PetBreedService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PetBreedService,\n    factory: PetBreedService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","map","BaseService","PetBreedService","constructor","http","getPetBreed","petBreedId","get","pipe","response","data","handleError","getAllPetBreeds","createPetBreed","petBreed","post","updatePetBreed","put","id","deletePetBreed","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\pets-appoinments-app\\src\\app\\services\\petBreed.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { PetBreedRequestModel } from '../models/request.models';\r\nimport { PetBreedResponseModel, APIResponseModel } from '../models/response.models';\r\nimport { BaseService } from './BaseService.services';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PetBreedService extends BaseService {\r\n\r\n  constructor(public override http: HttpClient) {\r\n    super(http);\r\n  }\r\n\r\n  getPetBreed(petBreedId: number): Observable<PetBreedResponseModel> {\r\n    return this.get<APIResponseModel<PetBreedResponseModel>>(`petbreeds/${petBreedId}`)\r\n      .pipe(\r\n        map(response => response.data as PetBreedResponseModel),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getAllPetBreeds(): Observable<PetBreedResponseModel[]> {\r\n    return this.get<APIResponseModel<PetBreedResponseModel[]>>('petbreed')\r\n      .pipe(\r\n        map(response => response.data as PetBreedResponseModel[]),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createPetBreed(petBreed: PetBreedRequestModel): Observable<boolean> {\r\n    return this.post<APIResponseModel<boolean>>('petbreed', petBreed)\r\n      .pipe(\r\n        map(response => response.data as boolean),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updatePetBreed(petBreed: PetBreedRequestModel): Observable<boolean> {\r\n    return this.put<APIResponseModel<boolean>>(`petbreeds/${petBreed.id}`, petBreed)\r\n      .pipe(\r\n        map(response => response.data as boolean),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  deletePetBreed(petBreedId: number): Observable<boolean> {\r\n    return this.delete<APIResponseModel<boolean>>(`petbreeds/${petBreedId}`)\r\n      .pipe(\r\n        map(response => response.data as boolean),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n}\r\n"],"mappings":"AAGA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAGhD,SAASC,WAAW,QAAQ,wBAAwB;;;AAKpD,OAAM,MAAOC,eAAgB,SAAQD,WAAW;EAE9CE,YAA4BC,IAAgB;IAC1C,KAAK,CAACA,IAAI,CAAC;IADe,KAAAA,IAAI,GAAJA,IAAI;EAEhC;EAEAC,WAAWA,CAACC,UAAkB;IAC5B,OAAO,IAAI,CAACC,GAAG,CAA0C,aAAaD,UAAU,EAAE,CAAC,CAChFE,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAA6B,CAAC,EACvDX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACL,GAAG,CAA4C,UAAU,CAAC,CACnEC,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAA+B,CAAC,EACzDX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEAE,cAAcA,CAACC,QAA8B;IAC3C,OAAO,IAAI,CAACC,IAAI,CAA4B,UAAU,EAAED,QAAQ,CAAC,CAC9DN,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAAe,CAAC,EACzCX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEAK,cAAcA,CAACF,QAA8B;IAC3C,OAAO,IAAI,CAACG,GAAG,CAA4B,aAAaH,QAAQ,CAACI,EAAE,EAAE,EAAEJ,QAAQ,CAAC,CAC7EN,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAAe,CAAC,EACzCX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEAQ,cAAcA,CAACb,UAAkB;IAC/B,OAAO,IAAI,CAACc,MAAM,CAA4B,aAAad,UAAU,EAAE,CAAC,CACrEE,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAAe,CAAC,EACzCX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAAC,QAAAU,CAAA,G;qBA5CUnB,eAAe,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfxB,eAAe;IAAAyB,OAAA,EAAfzB,eAAe,CAAA0B,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}