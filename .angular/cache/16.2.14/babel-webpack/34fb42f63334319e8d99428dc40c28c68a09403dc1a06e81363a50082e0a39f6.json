{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { BaseService } from './BaseService.services';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PetTypeService extends BaseService {\n  constructor(http) {\n    super(http);\n    this.http = http;\n  }\n  getPetType(petTypeId) {\n    return this.get(`pettype/${petTypeId}`).pipe(map(response => response.data), catchError(this.handleError));\n  }\n  getAllPetTypes() {\n    return this.get('pettypes').pipe(map(response => response.data), catchError(this.handleError));\n  }\n  createPetType(petType) {\n    return this.post('pettypes', petType).pipe(map(response => response.data), catchError(this.handleError));\n  }\n  updatePetType(petType) {\n    return this.put(`pettypes/${petType.id}`, petType).pipe(map(response => response.data), catchError(this.handleError));\n  }\n  deletePetType(petTypeId) {\n    return this.delete(`pettypes/${petTypeId}`).pipe(map(response => response.data), catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function PetTypeService_Factory(t) {\n    return new (t || PetTypeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PetTypeService,\n    factory: PetTypeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","map","BaseService","PetTypeService","constructor","http","getPetType","petTypeId","get","pipe","response","data","handleError","getAllPetTypes","createPetType","petType","post","updatePetType","put","id","deletePetType","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\pets-appoinments-app\\src\\app\\services\\pettype.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { PetTypeRequestModel } from '../models/request.models';\r\nimport { PetTypeResponseModel, APIResponseModel } from '../models/response.models';\r\nimport { BaseService } from './BaseService.services';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PetTypeService extends BaseService {\r\n\r\n  constructor(public override http: HttpClient) {\r\n    super(http);\r\n  }\r\n\r\n  getPetType(petTypeId: number): Observable<PetTypeResponseModel> {\r\n    return this.get<APIResponseModel<PetTypeResponseModel>>(`pettype/${petTypeId}`)\r\n      .pipe(\r\n        map(response => response.data as PetTypeResponseModel),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getAllPetTypes(): Observable<PetTypeResponseModel[]> {\r\n    return this.get<APIResponseModel<PetTypeResponseModel[]>>('pettypes')\r\n      .pipe(\r\n        map(response => response.data as PetTypeResponseModel[]),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createPetType(petType: PetTypeRequestModel): Observable<boolean> {\r\n    return this.post<APIResponseModel<boolean>>('pettypes', petType)\r\n      .pipe(\r\n        map(response => response.data as boolean),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updatePetType(petType: PetTypeRequestModel): Observable<boolean> {\r\n    return this.put<APIResponseModel<boolean>>(`pettypes/${petType.id}`, petType)\r\n      .pipe(\r\n        map(response => response.data as boolean),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  deletePetType(petTypeId: number): Observable<boolean> {\r\n    return this.delete<APIResponseModel<boolean>>(`pettypes/${petTypeId}`)\r\n      .pipe(\r\n        map(response => response.data as boolean),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAGhD,SAASC,WAAW,QAAQ,wBAAwB;;;AAKpD,OAAM,MAAOC,cAAe,SAAQD,WAAW;EAE7CE,YAA4BC,IAAgB;IAC1C,KAAK,CAACA,IAAI,CAAC;IADe,KAAAA,IAAI,GAAJA,IAAI;EAEhC;EAEAC,UAAUA,CAACC,SAAiB;IAC1B,OAAO,IAAI,CAACC,GAAG,CAAyC,WAAWD,SAAS,EAAE,CAAC,CAC5EE,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAA4B,CAAC,EACtDX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACL,GAAG,CAA2C,UAAU,CAAC,CAClEC,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAA8B,CAAC,EACxDX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEAE,aAAaA,CAACC,OAA4B;IACxC,OAAO,IAAI,CAACC,IAAI,CAA4B,UAAU,EAAED,OAAO,CAAC,CAC7DN,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAAe,CAAC,EACzCX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEAK,aAAaA,CAACF,OAA4B;IACxC,OAAO,IAAI,CAACG,GAAG,CAA4B,YAAYH,OAAO,CAACI,EAAE,EAAE,EAAEJ,OAAO,CAAC,CAC1EN,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAAe,CAAC,EACzCX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEAQ,aAAaA,CAACb,SAAiB;IAC7B,OAAO,IAAI,CAACc,MAAM,CAA4B,YAAYd,SAAS,EAAE,CAAC,CACnEE,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAAe,CAAC,EACzCX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAAC,QAAAU,CAAA,G;qBA5CUnB,cAAc,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxB,cAAc;IAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}