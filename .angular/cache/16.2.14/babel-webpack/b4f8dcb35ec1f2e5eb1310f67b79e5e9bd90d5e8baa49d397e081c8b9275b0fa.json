{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/pettype.services\";\nimport * as i4 from \"@angular/common\";\nfunction EditPetTypeComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditPetTypeComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtemplate(1, EditPetTypeComponent_div_8_div_1_Template, 2, 0, \"div\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.editForm.get(\"name\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nexport class EditPetTypeComponent {\n  constructor(fb, router, route, service) {\n    this.fb = fb;\n    this.router = router;\n    this.route = route;\n    this.service = service;\n    this.petTypeId = null;\n    this.petTypes = [];\n    this.editForm = this.fb.group({\n      name: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.petTypeId = +this.route.snapshot.params['id']; // Convert id to a number if needed\n    this.service.getPetType(this.petTypeId).subscribe(petType => {\n      if (petType) {\n        this.editForm.patchValue({\n          id: petType.id,\n          name: petType.name\n        });\n      }\n    });\n    // this.petTypeId = +this.route.snapshot.params['id']; // Convert id to a number if needed\n    // this.service.getPetType(this.petTypeId).subscribe((petType: any) => {\n    //   if (petType) {\n    //     this.editForm.patchValue(petType); // Patch the form with retrieved petType data\n    //   }\n    // });\n  }\n\n  onSubmit() {\n    if (this.editForm.valid) {\n      const formData = this.editForm.value;\n      this.service.updatePetType(formData).subscribe(() => {\n        console.log('Updated Pet Type data:', formData);\n        alert('Pet Type Updated Successfully');\n        this.router.navigate(['/pet-types']);\n      }, error => {\n        console.error('Error updating pet type:', error);\n        // Handle error updating pet type\n        alert('Failed to update Pet Type');\n      });\n      // this.service.updatePetType(this.petTypeId,this.editForm.value).subscribe( res =>{\n      //   // Simulate updating the pet type data\n      // console.log('Updated Pet Type data:', this.editForm.value);\n      // alert(\"Pet Saved Successfully\");\n      // this.router.navigate(['/pet-types']);\n    } else {\n      Object.keys(this.editForm.controls).forEach(field => {\n        const control = this.editForm.get(field);\n        control?.markAsTouched({\n          onlySelf: true\n        });\n      });\n    }\n  }\n  static #_ = this.ɵfac = function EditPetTypeComponent_Factory(t) {\n    return new (t || EditPetTypeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.PetTypeService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditPetTypeComponent,\n    selectors: [[\"app-edit-pet-type\"]],\n    decls: 14,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-2\", 3, \"disabled\"], [\"routerLink\", \"/pet-types\", 1, \"btn\", \"btn-outline-secondary\"], [1, \"fas\", \"fa-arrow-left\", \"mr-1\"], [1, \"invalid-feedback\"], [4, \"ngIf\"]],\n    template: function EditPetTypeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Edit Pet Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function EditPetTypeComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, EditPetTypeComponent_div_8_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 6);\n        i0.ɵɵtext(10, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"a\", 7);\n        i0.ɵɵelement(12, \"i\", 8);\n        i0.ɵɵtext(13, \" Back to Pet Types \");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.editForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.editForm.get(\"name\")) == null ? null : tmp_1_0.invalid) && (((tmp_1_0 = ctx.editForm.get(\"name\")) == null ? null : tmp_1_0.dirty) || ((tmp_1_0 = ctx.editForm.get(\"name\")) == null ? null : tmp_1_0.touched)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.editForm.invalid);\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i2.RouterLink, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","EditPetTypeComponent_div_8_div_1_Template","ɵɵadvance","ɵɵproperty","tmp_0_0","ctx_r0","editForm","get","errors","EditPetTypeComponent","constructor","fb","router","route","service","petTypeId","petTypes","group","name","required","ngOnInit","snapshot","params","getPetType","subscribe","petType","patchValue","id","onSubmit","valid","formData","value","updatePetType","console","log","alert","navigate","error","Object","keys","controls","forEach","field","control","markAsTouched","onlySelf","_","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","ActivatedRoute","i3","PetTypeService","_2","selectors","decls","vars","consts","template","EditPetTypeComponent_Template","rf","ctx","ɵɵlistener","EditPetTypeComponent_Template_form_ngSubmit_3_listener","ɵɵelement","EditPetTypeComponent_div_8_Template","tmp_1_0","invalid","dirty","touched"],"sources":["E:\\pets-appoinments-app\\src\\app\\edit-pet-type\\edit-pet-type.component.ts","E:\\pets-appoinments-app\\src\\app\\edit-pet-type\\edit-pet-type.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { PetTypeService } from '../services/pettype.services';\nimport { PetTypeResponseModel } from '../models/response.models';\n\n@Component({\n  selector: 'app-edit-pet-type',\n  templateUrl: './edit-pet-type.component.html',\n  styleUrls: ['./edit-pet-type.component.css']\n})\nexport class EditPetTypeComponent implements OnInit {\n  editForm: FormGroup;\n  petTypeId: number | null = null;\n  petTypes :PetTypeResponseModel [] = [];\n\n  constructor(private fb: FormBuilder, private router: Router, private route: ActivatedRoute,public service : PetTypeService) {\n    this.editForm = this.fb.group({\n      name: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.petTypeId = +this.route.snapshot.params['id']; // Convert id to a number if needed\n\n    this.service.getPetType(this.petTypeId).subscribe((petType: PetTypeResponseModel) => {\n      if (petType) {\n        this.editForm.patchValue({\n          id: petType.id,\n          name: petType.name\n        });\n      }\n    });\n    // this.petTypeId = +this.route.snapshot.params['id']; // Convert id to a number if needed\n\n    // this.service.getPetType(this.petTypeId).subscribe((petType: any) => {\n    //   if (petType) {\n    //     this.editForm.patchValue(petType); // Patch the form with retrieved petType data\n    //   }\n    // });\n  }\n\n  onSubmit(): void {\n    if (this.editForm.valid) {\n      const formData = this.editForm.value;\n      this.service.updatePetType(formData).subscribe(\n        () => {\n          console.log('Updated Pet Type data:', formData);\n          alert('Pet Type Updated Successfully');\n          this.router.navigate(['/pet-types']);\n        },\n        (error) => {\n          console.error('Error updating pet type:', error);\n          // Handle error updating pet type\n          alert('Failed to update Pet Type');\n        }\n      );\n      // this.service.updatePetType(this.petTypeId,this.editForm.value).subscribe( res =>{\n      //   // Simulate updating the pet type data\n      // console.log('Updated Pet Type data:', this.editForm.value);\n      // alert(\"Pet Saved Successfully\");\n      // this.router.navigate(['/pet-types']);\n      \n    } else {\n      Object.keys(this.editForm.controls).forEach(field => {\n        const control = this.editForm.get(field);\n        control?.markAsTouched({ onlySelf: true });\n      });\n    }\n  }\n}","<div class=\"container\">\n    <h2>Edit Pet Type</h2>\n    <form [formGroup]=\"editForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label for=\"name\">Name</label>\n        <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\">\n        <div *ngIf=\"editForm.get('name')?.invalid && (editForm.get('name')?.dirty || editForm.get('name')?.touched)\" class=\"invalid-feedback\">\n          <div *ngIf=\"editForm.get('name')?.errors?.['required']\">\n            Name is required.\n          </div>\n        </div>\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary mr-2\" [disabled]=\"editForm.invalid\">Save</button>\n      <a routerLink=\"/pet-types\" class=\"btn btn-outline-secondary\">\n        <i class=\"fas fa-arrow-left mr-1\"></i> Back to Pet Types\n      </a>\n    </form>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}