{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/petBreed.service\";\nimport * as i4 from \"@angular/common\";\nfunction AddPetTypeComponent_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const petType_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", petType_r3.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(petType_r3.name);\n  }\n}\nfunction AddPetTypeComponent_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Pet Type is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddPetTypeComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, AddPetTypeComponent_div_9_div_1_Template, 2, 0, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.newForm.get(\"petTypeId\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nfunction AddPetTypeComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddPetTypeComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, AddPetTypeComponent_div_14_div_1_Template, 2, 0, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.newForm.get(\"name\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nexport class AddPetTypeComponent {\n  constructor(fb, router, service) {\n    this.fb = fb;\n    this.router = router;\n    this.service = service;\n    this.newForm = this.fb.group({\n      name: ['', Validators.required]\n    });\n  }\n  ngOnInit() {}\n  onSubmit() {\n    if (this.newForm.valid) {\n      this.service.createPetBreed(this.newForm.value).subscribe(res => {\n        console.log('Pet Type data:', this.newForm.value);\n        alert(\"Pet Saved Successfully\");\n        this.router.navigate(['/pet-types']);\n      });\n    } else {\n      Object.keys(this.newForm.controls).forEach(field => {\n        const control = this.newForm.get(field);\n        control?.markAsTouched({\n          onlySelf: true\n        });\n      });\n    }\n  }\n  static #_ = this.ɵfac = function AddPetTypeComponent_Factory(t) {\n    return new (t || AddPetTypeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.PetBreedService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddPetTypeComponent,\n    selectors: [[\"app-add-pet-type\"]],\n    decls: 19,\n    vars: 5,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"petTypeId\"], [\"id\", \"petTypeId\", \"formControlName\", \"petTypeId\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-2\", 3, \"disabled\"], [\"routerLink\", \"/pet-types\", 1, \"btn\", \"btn-outline-secondary\"], [3, \"value\"], [1, \"invalid-feedback\"], [4, \"ngIf\"]],\n    template: function AddPetTypeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Add New Pet Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function AddPetTypeComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Pet Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"select\", 4);\n        i0.ɵɵtemplate(8, AddPetTypeComponent_option_8_Template, 2, 2, \"option\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, AddPetTypeComponent_div_9_Template, 2, 1, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 7);\n        i0.ɵɵtext(12, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 8);\n        i0.ɵɵtemplate(14, AddPetTypeComponent_div_14_Template, 2, 1, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"button\", 9);\n        i0.ɵɵtext(16, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"a\", 10);\n        i0.ɵɵtext(18, \"Cancel\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        let tmp_2_0;\n        let tmp_3_0;\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.newForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.petTypes);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.newForm.get(\"petTypeId\")) == null ? null : tmp_2_0.invalid) && (((tmp_2_0 = ctx.newForm.get(\"petTypeId\")) == null ? null : tmp_2_0.dirty) || ((tmp_2_0 = ctx.newForm.get(\"petTypeId\")) == null ? null : tmp_2_0.touched)));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.newForm.get(\"name\")) == null ? null : tmp_3_0.invalid) && (((tmp_3_0 = ctx.newForm.get(\"name\")) == null ? null : tmp_3_0.dirty) || ((tmp_3_0 = ctx.newForm.get(\"name\")) == null ? null : tmp_3_0.touched)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.newForm.invalid);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i2.RouterLink, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","petType_r3","id","ɵɵadvance","ɵɵtextInterpolate","name","ɵɵtemplate","AddPetTypeComponent_div_9_div_1_Template","tmp_0_0","ctx_r1","newForm","get","errors","AddPetTypeComponent_div_14_div_1_Template","ctx_r2","AddPetTypeComponent","constructor","fb","router","service","group","required","ngOnInit","onSubmit","valid","createPetBreed","value","subscribe","res","console","log","alert","navigate","Object","keys","controls","forEach","field","control","markAsTouched","onlySelf","_","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","i3","PetBreedService","_2","selectors","decls","vars","consts","template","AddPetTypeComponent_Template","rf","ctx","ɵɵlistener","AddPetTypeComponent_Template_form_ngSubmit_3_listener","AddPetTypeComponent_option_8_Template","AddPetTypeComponent_div_9_Template","ɵɵelement","AddPetTypeComponent_div_14_Template","petTypes","tmp_2_0","invalid","dirty","touched","tmp_3_0"],"sources":["E:\\pets-appoinments-app\\src\\app\\add-pet-type\\add-pet-type.component.ts","E:\\pets-appoinments-app\\src\\app\\add-pet-type\\add-pet-type.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { PetTypeService } from '../services/pettype.services';\nimport { PetBreedService } from '../services/petBreed.service';\n\n@Component({\n  selector: 'app-add-pet-type',\n  templateUrl: './add-pet-type.component.html',\n  styleUrls: ['./add-pet-type.component.css']\n})\nexport class AddPetTypeComponent implements OnInit {\n  newForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private router: Router, public service : PetBreedService) {\n    this.newForm = this.fb.group({\n      name: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit(): void {\n    if (this.newForm.valid) {\n      this.service.createPetBreed(this.newForm.value).subscribe( res =>{\n        console.log('Pet Type data:', this.newForm.value);\n        alert(\"Pet Saved Successfully\");\n        this.router.navigate(['/pet-types']);\n    })\n    \n    } else {\n      Object.keys(this.newForm.controls).forEach(field => {\n        const control = this.newForm.get(field);\n        control?.markAsTouched({ onlySelf: true });\n      });\n    }\n  }\n}\n","<div class=\"container\">\n  <h2>Add New Pet Type</h2>\n  <form [formGroup]=\"newForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"petTypeId\">Pet Type</label>\n      <select id=\"petTypeId\" class=\"form-control\" formControlName=\"petTypeId\">\n        <option *ngFor=\"let petType of petTypes\" [value]=\"petType.id\">{{ petType.name }}</option>\n      </select>\n      <div *ngIf=\"newForm.get('petTypeId')?.invalid && (newForm.get('petTypeId')?.dirty || newForm.get('petTypeId')?.touched)\" class=\"invalid-feedback\">\n        <div *ngIf=\"newForm.get('petTypeId')?.errors?.['required']\">\n          Pet Type is required.\n        </div>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"name\">Name</label>\n      <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\">\n      <div *ngIf=\"newForm.get('name')?.invalid && (newForm.get('name')?.dirty || newForm.get('name')?.touched)\" class=\"invalid-feedback\">\n        <div *ngIf=\"newForm.get('name')?.errors?.['required']\">\n          Name is required.\n        </div>\n      </div>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary mr-2\" [disabled]=\"newForm.invalid\">Save</button>\n    <a routerLink=\"/pet-types\" class=\"btn btn-outline-secondary\">Cancel</a>\n  </form>\n</div>\n"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;ICK3DC,EAAA,CAAAC,cAAA,iBAA8D;IAAAD,EAAA,CAAAE,MAAA,GAAkB;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;IAAhDH,EAAA,CAAAI,UAAA,UAAAC,UAAA,CAAAC,EAAA,CAAoB;IAACN,EAAA,CAAAO,SAAA,GAAkB;IAAlBP,EAAA,CAAAQ,iBAAA,CAAAH,UAAA,CAAAI,IAAA,CAAkB;;;;;IAGhFT,EAAA,CAAAC,cAAA,UAA4D;IAC1DD,EAAA,CAAAE,MAAA,8BACF;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IAHRH,EAAA,CAAAC,cAAA,cAAkJ;IAChJD,EAAA,CAAAU,UAAA,IAAAC,wCAAA,kBAEM;IACRX,EAAA,CAAAG,YAAA,EAAM;;;;;IAHEH,EAAA,CAAAO,SAAA,GAAoD;IAApDP,EAAA,CAAAI,UAAA,UAAAQ,OAAA,GAAAC,MAAA,CAAAC,OAAA,CAAAC,GAAA,gCAAAH,OAAA,CAAAI,MAAA,kBAAAJ,OAAA,CAAAI,MAAA,aAAoD;;;;;IAS1DhB,EAAA,CAAAC,cAAA,UAAuD;IACrDD,EAAA,CAAAE,MAAA,0BACF;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IAHRH,EAAA,CAAAC,cAAA,cAAmI;IACjID,EAAA,CAAAU,UAAA,IAAAO,yCAAA,kBAEM;IACRjB,EAAA,CAAAG,YAAA,EAAM;;;;;IAHEH,EAAA,CAAAO,SAAA,GAA+C;IAA/CP,EAAA,CAAAI,UAAA,UAAAQ,OAAA,GAAAM,MAAA,CAAAJ,OAAA,CAAAC,GAAA,2BAAAH,OAAA,CAAAI,MAAA,kBAAAJ,OAAA,CAAAI,MAAA,aAA+C;;;ADP7D,OAAM,MAAOG,mBAAmB;EAG9BC,YAAoBC,EAAe,EAAUC,MAAc,EAASC,OAAyB;IAAzE,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAAiB,KAAAC,OAAO,GAAPA,OAAO;IACzE,IAAI,CAACT,OAAO,GAAG,IAAI,CAACO,EAAE,CAACG,KAAK,CAAC;MAC3Bf,IAAI,EAAE,CAAC,EAAE,EAAEV,UAAU,CAAC0B,QAAQ;KAC/B,CAAC;EACJ;EAEAC,QAAQA,CAAA,GAAU;EAElBC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACb,OAAO,CAACc,KAAK,EAAE;MACtB,IAAI,CAACL,OAAO,CAACM,cAAc,CAAC,IAAI,CAACf,OAAO,CAACgB,KAAK,CAAC,CAACC,SAAS,CAAEC,GAAG,IAAG;QAC/DC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACpB,OAAO,CAACgB,KAAK,CAAC;QACjDK,KAAK,CAAC,wBAAwB,CAAC;QAC/B,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACxC,CAAC,CAAC;KAED,MAAM;MACLC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACxB,OAAO,CAACyB,QAAQ,CAAC,CAACC,OAAO,CAACC,KAAK,IAAG;QACjD,MAAMC,OAAO,GAAG,IAAI,CAAC5B,OAAO,CAACC,GAAG,CAAC0B,KAAK,CAAC;QACvCC,OAAO,EAAEC,aAAa,CAAC;UAAEC,QAAQ,EAAE;QAAI,CAAE,CAAC;MAC5C,CAAC,CAAC;;EAEN;EAAC,QAAAC,CAAA,G;qBAzBU1B,mBAAmB,EAAAnB,EAAA,CAAA8C,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAhD,EAAA,CAAA8C,iBAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAlD,EAAA,CAAA8C,iBAAA,CAAAK,EAAA,CAAAC,eAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAnBlC,mBAAmB;IAAAmC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCXhC5D,EAAA,CAAAC,cAAA,aAAuB;QACjBD,EAAA,CAAAE,MAAA,uBAAgB;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACzBH,EAAA,CAAAC,cAAA,cAAoD;QAAxBD,EAAA,CAAA8D,UAAA,sBAAAC,sDAAA;UAAA,OAAYF,GAAA,CAAAlC,QAAA,EAAU;QAAA,EAAC;QACjD3B,EAAA,CAAAC,cAAA,aAAwB;QACCD,EAAA,CAAAE,MAAA,eAAQ;QAAAF,EAAA,CAAAG,YAAA,EAAQ;QACvCH,EAAA,CAAAC,cAAA,gBAAwE;QACtED,EAAA,CAAAU,UAAA,IAAAsD,qCAAA,oBAAyF;QAC3FhE,EAAA,CAAAG,YAAA,EAAS;QACTH,EAAA,CAAAU,UAAA,IAAAuD,kCAAA,iBAIM;QACRjE,EAAA,CAAAG,YAAA,EAAM;QACNH,EAAA,CAAAC,cAAA,cAAwB;QACJD,EAAA,CAAAE,MAAA,YAAI;QAAAF,EAAA,CAAAG,YAAA,EAAQ;QAC9BH,EAAA,CAAAkE,SAAA,gBAAyE;QACzElE,EAAA,CAAAU,UAAA,KAAAyD,mCAAA,iBAIM;QACRnE,EAAA,CAAAG,YAAA,EAAM;QACNH,EAAA,CAAAC,cAAA,iBAAgF;QAAAD,EAAA,CAAAE,MAAA,YAAI;QAAAF,EAAA,CAAAG,YAAA,EAAS;QAC7FH,EAAA,CAAAC,cAAA,aAA6D;QAAAD,EAAA,CAAAE,MAAA,cAAM;QAAAF,EAAA,CAAAG,YAAA,EAAI;;;;;QAtBnEH,EAAA,CAAAO,SAAA,GAAqB;QAArBP,EAAA,CAAAI,UAAA,cAAAyD,GAAA,CAAA/C,OAAA,CAAqB;QAIOd,EAAA,CAAAO,SAAA,GAAW;QAAXP,EAAA,CAAAI,UAAA,YAAAyD,GAAA,CAAAO,QAAA,CAAW;QAEnCpE,EAAA,CAAAO,SAAA,GAAiH;QAAjHP,EAAA,CAAAI,UAAA,WAAAiE,OAAA,GAAAR,GAAA,CAAA/C,OAAA,CAAAC,GAAA,gCAAAsD,OAAA,CAAAC,OAAA,QAAAD,OAAA,GAAAR,GAAA,CAAA/C,OAAA,CAAAC,GAAA,gCAAAsD,OAAA,CAAAE,KAAA,OAAAF,OAAA,GAAAR,GAAA,CAAA/C,OAAA,CAAAC,GAAA,gCAAAsD,OAAA,CAAAG,OAAA,GAAiH;QASjHxE,EAAA,CAAAO,SAAA,GAAkG;QAAlGP,EAAA,CAAAI,UAAA,WAAAqE,OAAA,GAAAZ,GAAA,CAAA/C,OAAA,CAAAC,GAAA,2BAAA0D,OAAA,CAAAH,OAAA,QAAAG,OAAA,GAAAZ,GAAA,CAAA/C,OAAA,CAAAC,GAAA,2BAAA0D,OAAA,CAAAF,KAAA,OAAAE,OAAA,GAAAZ,GAAA,CAAA/C,OAAA,CAAAC,GAAA,2BAAA0D,OAAA,CAAAD,OAAA,GAAkG;QAMvDxE,EAAA,CAAAO,SAAA,GAA4B;QAA5BP,EAAA,CAAAI,UAAA,aAAAyD,GAAA,CAAA/C,OAAA,CAAAwD,OAAA,CAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}