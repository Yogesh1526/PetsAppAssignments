{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nexport let AddOwnerComponent = class AddOwnerComponent {\n  constructor(formBuilder, addressService, ownerService) {\n    this.formBuilder = formBuilder;\n    this.addressService = addressService;\n    this.ownerService = ownerService;\n  }\n  ngOnInit() {\n    this.buildForm();\n  }\n  buildForm() {\n    this.contactForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      addressLine1: ['', Validators.required],\n      addressLine2: [''],\n      city: ['', Validators.required],\n      state: ['', Validators.required],\n      zip: ['', Validators.required],\n      country: ['', Validators.required],\n      phoneNumber: ['', Validators.required],\n      emailAddress: ['']\n    });\n  }\n  onSubmit() {\n    if (this.contactForm.valid) {\n      const addressData = {\n        id: 0,\n        line1: this.contactForm.value.addressLine1,\n        line2: this.contactForm.value.addressLine2,\n        city: this.contactForm.value.city,\n        state: this.contactForm.value.state,\n        zip: this.contactForm.value.zip,\n        country: this.contactForm.value.country\n      };\n      // Step 1: Save Address\n      this.addressService.createAddress(addressData).subscribe(addressResponse => {\n        console.log('Address saved successfully:', addressResponse);\n        // Step 2: Prepare owner data with saved address ID\n        const ownerData = {\n          id: 0,\n          name: this.contactForm.value.name,\n          addressId: addressResponse.id,\n          phoneNumber: this.contactForm.value.phoneNumber,\n          emailAddress: this.contactForm.value.emailAddress\n        };\n        // Step 3: Save Owner\n        this.ownerService.createPetOwner(ownerData).subscribe(ownerResponse => {\n          console.log('Owner saved successfully:', ownerResponse);\n          // Optionally reset the form after successful submission\n          this.contactForm.reset();\n        }, error => {\n          console.error('Error saving owner:', error);\n          // Handle error saving owner\n        });\n      }, error => {\n        console.error('Error saving address:', error);\n        // Handle error saving address\n      });\n    } else {\n      // Mark all form fields as touched to trigger validation messages\n      this.markFormGroupTouched(this.contactForm);\n    }\n  }\n  markFormGroupTouched(formGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n};\nAddOwnerComponent = __decorate([Component({\n  selector: 'app-owner-form',\n  templateUrl: './owner-form.component.html',\n  styleUrls: ['./owner-form.component.css']\n})], AddOwnerComponent);","map":{"version":3,"names":["Component","FormGroup","Validators","AddOwnerComponent","constructor","formBuilder","addressService","ownerService","ngOnInit","buildForm","contactForm","group","name","required","addressLine1","addressLine2","city","state","zip","country","phoneNumber","emailAddress","onSubmit","valid","addressData","id","line1","value","line2","createAddress","subscribe","addressResponse","console","log","ownerData","addressId","createPetOwner","ownerResponse","reset","error","markFormGroupTouched","formGroup","Object","values","controls","forEach","control","markAsTouched","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\pets-appoinments-app\\src\\app\\add-owner\\add-owner.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AddressService } from '../services/Address.services';\nimport { PetOwnerService } from '../services/petowner.service';\nimport { AddressRequestModel, PetOwnerRequestModel } from '../models/request.models';\n\n@Component({\n  selector: 'app-owner-form',\n  templateUrl: './owner-form.component.html',\n  styleUrls: ['./owner-form.component.css']\n})\nexport class AddOwnerComponent implements OnInit {\n  contactForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private addressService: AddressService,\n    private ownerService: PetOwnerService\n  ) { }\n\n  ngOnInit(): void {\n    this.buildForm();\n  }\n\n  buildForm(): void {\n    this.contactForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      addressLine1: ['', Validators.required],\n      addressLine2: [''],\n      city: ['', Validators.required],\n      state: ['', Validators.required],\n      zip: ['', Validators.required],\n      country: ['', Validators.required],\n      phoneNumber: ['', Validators.required],\n      emailAddress: ['']\n    });\n  }\n\n  onSubmit(): void {\n    if (this.contactForm.valid) {\n      const addressData: AddressRequestModel = {\n        id:0,\n        line1: this.contactForm.value.addressLine1,\n        line2: this.contactForm.value.addressLine2,\n        city: this.contactForm.value.city,\n        state: this.contactForm.value.state,\n        zip: this.contactForm.value.zip,\n        country: this.contactForm.value.country\n      };\n\n      // Step 1: Save Address\n      this.addressService.createAddress(addressData).subscribe(\n        (addressResponse) => {\n          console.log('Address saved successfully:', addressResponse);\n          \n          // Step 2: Prepare owner data with saved address ID\n          const ownerData: PetOwnerRequestModel = {\n            id:0,\n            name: this.contactForm.value.name,\n            addressId: addressResponse.id, // Assuming the API returns an ID for the saved address\n            phoneNumber: this.contactForm.value.phoneNumber,\n            emailAddress: this.contactForm.value.emailAddress\n          };\n\n          // Step 3: Save Owner\n          this.ownerService.createPetOwner(ownerData).subscribe(\n            (ownerResponse) => {\n              console.log('Owner saved successfully:', ownerResponse);\n              // Optionally reset the form after successful submission\n              this.contactForm.reset();\n            },\n            (error) => {\n              console.error('Error saving owner:', error);\n              // Handle error saving owner\n            }\n          );\n        },\n        (error) => {\n          console.error('Error saving address:', error);\n          // Handle error saving address\n        }\n      );\n\n    } else {\n      // Mark all form fields as touched to trigger validation messages\n      this.markFormGroupTouched(this.contactForm);\n    }\n  }\n\n  markFormGroupTouched(formGroup: FormGroup): void {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}