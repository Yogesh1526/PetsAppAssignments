{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/appointment.service\";\nimport * as i4 from \"../services/petowner.service\";\nimport * as i5 from \"../services/pet.services\";\nexport class EditAppointmentComponent {\n  constructor(fb, router, route, appointmentService, ownerService, petService) {\n    this.fb = fb;\n    this.router = router;\n    this.route = route;\n    this.appointmentService = appointmentService;\n    this.ownerService = ownerService;\n    this.petService = petService;\n    this.owners = []; // Define owners array type as per your actual data structure\n    this.pets = []; // Define pets array type as per your actual data structure\n    this.editForm = this.fb.group({\n      ownerId: ['', Validators.required],\n      petId: ['', Validators.required],\n      date: ['', Validators.required],\n      reason: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.appointmentId = +this.route.snapshot.params['id'];\n    this.loadAppointmentDetails();\n    this.loadOwners();\n    this.loadPets();\n  }\n  loadAppointmentDetails() {\n    this.appointmentService.getAppointment(this.appointmentId).subscribe(appointment => {\n      if (appointment) {\n        this.editForm.patchValue({\n          ownerId: appointment.ownerId,\n          petId: appointment.petId,\n          date: appointment.date,\n          reason: appointment.reason\n        });\n      }\n    });\n  }\n  loadOwners() {\n    this.ownerService.getAllPetOwners().subscribe(owners => {\n      this.owners = owners;\n    });\n  }\n  loadPets() {\n    this.petService.getAllPets().subscribe(pets => {\n      this.pets = pets;\n    });\n  }\n  onSubmit() {\n    if (this.editForm.valid) {\n      const appt = {\n        appointmentDate: this.date?.value,\n        id: this.appointmentId,\n        petId: this.petId?.value,\n        petOwnerId: this.ownerId?.value,\n        reason: this.reason?.value\n      };\n      this.appointmentService.updateAppointment(appt).subscribe(() => {\n        console.log('Appointment updated successfully');\n        this.router.navigate(['/appointments']);\n      }, error => {\n        console.error('Error updating appointment:', error);\n        // Handle error here (e.g., show error message)\n      });\n    }\n  }\n\n  get petId() {\n    return this.editForm.get('petId');\n  }\n  get ownerId() {\n    return this.editForm.get('ownerId');\n  }\n  get date() {\n    return this.editForm.get('date');\n  }\n  get reason() {\n    return this.editForm.get('reason');\n  }\n  static #_ = this.ɵfac = function EditAppointmentComponent_Factory(t) {\n    return new (t || EditAppointmentComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.AppointmentService), i0.ɵɵdirectiveInject(i4.PetOwnerService), i0.ɵɵdirectiveInject(i5.PetService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditAppointmentComponent,\n    selectors: [[\"app-edit-appointment\"]],\n    decls: 24,\n    vars: 2,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"petName\"], [\"type\", \"text\", \"id\", \"petName\", \"formControlName\", \"petName\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"ownerName\"], [\"type\", \"text\", \"id\", \"ownerName\", \"formControlName\", \"ownerName\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"date\"], [\"type\", \"date\", \"id\", \"date\", \"formControlName\", \"date\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"reason\"], [\"id\", \"reason\", \"formControlName\", \"reason\", \"rows\", \"3\", \"required\", \"\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-2\", 3, \"disabled\"], [\"routerLink\", \"/appointments\", 1, \"btn\", \"btn-outline-secondary\"]],\n    template: function EditAppointmentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Edit Appointment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function EditAppointmentComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Pet's Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Owner's Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 7);\n        i0.ɵɵtext(14, \"Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 2)(17, \"label\", 9);\n        i0.ɵɵtext(18, \"Reason\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"textarea\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"button\", 11);\n        i0.ɵɵtext(21, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"a\", 12);\n        i0.ɵɵtext(23, \"Cancel\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.editForm);\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"disabled\", ctx.editForm.invalid);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i2.RouterLink, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","EditAppointmentComponent","constructor","fb","router","route","appointmentService","ownerService","petService","owners","pets","editForm","group","ownerId","required","petId","date","reason","ngOnInit","appointmentId","snapshot","params","loadAppointmentDetails","loadOwners","loadPets","getAppointment","subscribe","appointment","patchValue","getAllPetOwners","getAllPets","onSubmit","valid","appt","appointmentDate","value","id","petOwnerId","updateAppointment","console","log","navigate","error","get","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","ActivatedRoute","i3","AppointmentService","i4","PetOwnerService","i5","PetService","_2","selectors","decls","vars","consts","template","EditAppointmentComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","EditAppointmentComponent_Template_form_ngSubmit_3_listener","ɵɵelement","ɵɵadvance","ɵɵproperty","invalid"],"sources":["E:\\pets-appoinments-app\\src\\app\\edit-appointment\\edit-appointment.component.ts","E:\\pets-appoinments-app\\src\\app\\edit-appointment\\edit-appointment.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AppointmentService } from '../services/appointment.service';\nimport { PetOwnerService } from '../services/petowner.service';\nimport { PetService } from '../services/pet.services';\nimport { AppointmentRequestModel } from '../models/request.models';\nimport { PetOwnerResponseModel, PetResponseModel } from '../models/response.models';\n\n@Component({\n  selector: 'app-edit-appointment',\n  templateUrl: './edit-appointment.component.html',\n  styleUrls: ['./edit-appointment.component.css']\n})\nexport class EditAppointmentComponent implements OnInit {\n  editForm: FormGroup;\n  owners: PetOwnerResponseModel[] = []; // Define owners array type as per your actual data structure\n  pets: PetResponseModel[] = []; // Define pets array type as per your actual data structure\n  appointmentId: number;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private appointmentService: AppointmentService,\n    private ownerService: PetOwnerService,\n    private petService: PetService\n  ) {\n    this.editForm = this.fb.group({\n      ownerId: ['', Validators.required],\n      petId: ['', Validators.required],\n      date: ['', Validators.required],\n      reason: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.appointmentId = +this.route.snapshot.params['id'];\n    this.loadAppointmentDetails();\n    this.loadOwners();\n    this.loadPets();\n  }\n\n  loadAppointmentDetails(): void {\n    this.appointmentService.getAppointment(this.appointmentId).subscribe((appointment: any) => {\n      if (appointment) {\n        this.editForm.patchValue({\n          ownerId: appointment.ownerId,\n          petId: appointment.petId,\n          date: appointment.date,\n          reason: appointment.reason\n        });\n      }\n    });\n  }\n\n  loadOwners(): void {\n    this.ownerService.getAllPetOwners().subscribe((owners: any[]) => {\n      this.owners = owners;\n    });\n  }\n\n  loadPets(): void {\n    this.petService.getAllPets().subscribe((pets: any[]) => {\n      this.pets = pets;\n    });\n  }\n\n  onSubmit(): void {\n    if (this.editForm.valid) {\n      const appt: AppointmentRequestModel = {\n        appointmentDate: this.date?.value,\n        id: this.appointmentId,\n        petId: this.petId?.value,\n        petOwnerId: this.ownerId?.value,\n        reason: this.reason?.value\n      };\n      this.appointmentService.updateAppointment(appt).subscribe(() => {\n        console.log('Appointment updated successfully');\n        this.router.navigate(['/appointments']);\n      }, error => {\n        console.error('Error updating appointment:', error);\n        // Handle error here (e.g., show error message)\n      });\n    }\n  }\n\n  get petId() {\n    return this.editForm.get('petId');\n  }\n\n  get ownerId() {\n    return this.editForm.get('ownerId');\n  }\n\n  get date() {\n    return this.editForm.get('date');\n  }\n\n  get reason() {\n    return this.editForm.get('reason');\n  }\n}\n","<div class=\"container\">\n    <h2>Edit Appointment</h2>\n    <form [formGroup]=\"editForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label for=\"petName\">Pet's Name</label>\n        <input type=\"text\" id=\"petName\" class=\"form-control\" formControlName=\"petName\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"ownerName\">Owner's Name</label>\n        <input type=\"text\" id=\"ownerName\" class=\"form-control\" formControlName=\"ownerName\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"date\">Date</label>\n        <input type=\"date\" id=\"date\" class=\"form-control\" formControlName=\"date\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"reason\">Reason</label>\n        <textarea id=\"reason\" class=\"form-control\" formControlName=\"reason\" rows=\"3\" required></textarea>\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary mr-2\" [disabled]=\"editForm.invalid\">Save</button>\n      <a routerLink=\"/appointments\" class=\"btn btn-outline-secondary\">Cancel</a>\n    </form>\n  </div>\n  "],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;AAanE,OAAM,MAAOC,wBAAwB;EAMnCC,YACUC,EAAe,EACfC,MAAc,EACdC,KAAqB,EACrBC,kBAAsC,EACtCC,YAA6B,EAC7BC,UAAsB;IALtB,KAAAL,EAAE,GAAFA,EAAE;IACF,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAClB,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,UAAU,GAAVA,UAAU;IAVpB,KAAAC,MAAM,GAA4B,EAAE,CAAC,CAAC;IACtC,KAAAC,IAAI,GAAuB,EAAE,CAAC,CAAC;IAW7B,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACR,EAAE,CAACS,KAAK,CAAC;MAC5BC,OAAO,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACc,QAAQ,CAAC;MAClCC,KAAK,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACc,QAAQ,CAAC;MAChCE,IAAI,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACc,QAAQ,CAAC;MAC/BG,MAAM,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACc,QAAQ;KACjC,CAAC;EACJ;EAEAI,QAAQA,CAAA;IACN,IAAI,CAACC,aAAa,GAAG,CAAC,IAAI,CAACd,KAAK,CAACe,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IACtD,IAAI,CAACC,sBAAsB,EAAE;IAC7B,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAF,sBAAsBA,CAAA;IACpB,IAAI,CAAChB,kBAAkB,CAACmB,cAAc,CAAC,IAAI,CAACN,aAAa,CAAC,CAACO,SAAS,CAAEC,WAAgB,IAAI;MACxF,IAAIA,WAAW,EAAE;QACf,IAAI,CAAChB,QAAQ,CAACiB,UAAU,CAAC;UACvBf,OAAO,EAAEc,WAAW,CAACd,OAAO;UAC5BE,KAAK,EAAEY,WAAW,CAACZ,KAAK;UACxBC,IAAI,EAAEW,WAAW,CAACX,IAAI;UACtBC,MAAM,EAAEU,WAAW,CAACV;SACrB,CAAC;;IAEN,CAAC,CAAC;EACJ;EAEAM,UAAUA,CAAA;IACR,IAAI,CAAChB,YAAY,CAACsB,eAAe,EAAE,CAACH,SAAS,CAAEjB,MAAa,IAAI;MAC9D,IAAI,CAACA,MAAM,GAAGA,MAAM;IACtB,CAAC,CAAC;EACJ;EAEAe,QAAQA,CAAA;IACN,IAAI,CAAChB,UAAU,CAACsB,UAAU,EAAE,CAACJ,SAAS,CAAEhB,IAAW,IAAI;MACrD,IAAI,CAACA,IAAI,GAAGA,IAAI;IAClB,CAAC,CAAC;EACJ;EAEAqB,QAAQA,CAAA;IACN,IAAI,IAAI,CAACpB,QAAQ,CAACqB,KAAK,EAAE;MACvB,MAAMC,IAAI,GAA4B;QACpCC,eAAe,EAAE,IAAI,CAAClB,IAAI,EAAEmB,KAAK;QACjCC,EAAE,EAAE,IAAI,CAACjB,aAAa;QACtBJ,KAAK,EAAE,IAAI,CAACA,KAAK,EAAEoB,KAAK;QACxBE,UAAU,EAAE,IAAI,CAACxB,OAAO,EAAEsB,KAAK;QAC/BlB,MAAM,EAAE,IAAI,CAACA,MAAM,EAAEkB;OACtB;MACD,IAAI,CAAC7B,kBAAkB,CAACgC,iBAAiB,CAACL,IAAI,CAAC,CAACP,SAAS,CAAC,MAAK;QAC7Da,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/C,IAAI,CAACpC,MAAM,CAACqC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;MACzC,CAAC,EAAEC,KAAK,IAAG;QACTH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD;MACF,CAAC,CAAC;;EAEN;;EAEA,IAAI3B,KAAKA,CAAA;IACP,OAAO,IAAI,CAACJ,QAAQ,CAACgC,GAAG,CAAC,OAAO,CAAC;EACnC;EAEA,IAAI9B,OAAOA,CAAA;IACT,OAAO,IAAI,CAACF,QAAQ,CAACgC,GAAG,CAAC,SAAS,CAAC;EACrC;EAEA,IAAI3B,IAAIA,CAAA;IACN,OAAO,IAAI,CAACL,QAAQ,CAACgC,GAAG,CAAC,MAAM,CAAC;EAClC;EAEA,IAAI1B,MAAMA,CAAA;IACR,OAAO,IAAI,CAACN,QAAQ,CAACgC,GAAG,CAAC,QAAQ,CAAC;EACpC;EAAC,QAAAC,CAAA,G;qBAvFU3C,wBAAwB,EAAA4C,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAE,cAAA,GAAAN,EAAA,CAAAC,iBAAA,CAAAM,EAAA,CAAAC,kBAAA,GAAAR,EAAA,CAAAC,iBAAA,CAAAQ,EAAA,CAAAC,eAAA,GAAAV,EAAA,CAAAC,iBAAA,CAAAU,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAxBzD,wBAAwB;IAAA0D,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,kCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCdrCpB,EAAA,CAAAsB,cAAA,aAAuB;QACftB,EAAA,CAAAuB,MAAA,uBAAgB;QAAAvB,EAAA,CAAAwB,YAAA,EAAK;QACzBxB,EAAA,CAAAsB,cAAA,cAAqD;QAAxBtB,EAAA,CAAAyB,UAAA,sBAAAC,2DAAA;UAAA,OAAYL,GAAA,CAAAnC,QAAA,EAAU;QAAA,EAAC;QAClDc,EAAA,CAAAsB,cAAA,aAAwB;QACDtB,EAAA,CAAAuB,MAAA,iBAAU;QAAAvB,EAAA,CAAAwB,YAAA,EAAQ;QACvCxB,EAAA,CAAA2B,SAAA,eAAwF;QAC1F3B,EAAA,CAAAwB,YAAA,EAAM;QACNxB,EAAA,CAAAsB,cAAA,aAAwB;QACCtB,EAAA,CAAAuB,MAAA,oBAAY;QAAAvB,EAAA,CAAAwB,YAAA,EAAQ;QAC3CxB,EAAA,CAAA2B,SAAA,gBAA4F;QAC9F3B,EAAA,CAAAwB,YAAA,EAAM;QACNxB,EAAA,CAAAsB,cAAA,cAAwB;QACJtB,EAAA,CAAAuB,MAAA,YAAI;QAAAvB,EAAA,CAAAwB,YAAA,EAAQ;QAC9BxB,EAAA,CAAA2B,SAAA,gBAAkF;QACpF3B,EAAA,CAAAwB,YAAA,EAAM;QACNxB,EAAA,CAAAsB,cAAA,cAAwB;QACFtB,EAAA,CAAAuB,MAAA,cAAM;QAAAvB,EAAA,CAAAwB,YAAA,EAAQ;QAClCxB,EAAA,CAAA2B,SAAA,oBAAiG;QACnG3B,EAAA,CAAAwB,YAAA,EAAM;QACNxB,EAAA,CAAAsB,cAAA,kBAAiF;QAAAtB,EAAA,CAAAuB,MAAA,YAAI;QAAAvB,EAAA,CAAAwB,YAAA,EAAS;QAC9FxB,EAAA,CAAAsB,cAAA,aAAgE;QAAAtB,EAAA,CAAAuB,MAAA,cAAM;QAAAvB,EAAA,CAAAwB,YAAA,EAAI;;;QAlBtExB,EAAA,CAAA4B,SAAA,GAAsB;QAAtB5B,EAAA,CAAA6B,UAAA,cAAAR,GAAA,CAAAvD,QAAA,CAAsB;QAiByBkC,EAAA,CAAA4B,SAAA,IAA6B;QAA7B5B,EAAA,CAAA6B,UAAA,aAAAR,GAAA,CAAAvD,QAAA,CAAAgE,OAAA,CAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}