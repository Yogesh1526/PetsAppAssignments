{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/pet.services\";\nimport * as i4 from \"../services/pettype.services\";\nimport * as i5 from \"../services/petBreed.service\";\nimport * as i6 from \"../services/petowner.service\";\nimport * as i7 from \"@angular/common\";\nfunction EditPetComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditPetComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, EditPetComponent_div_8_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.editForm.get(\"name\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nfunction EditPetComponent_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r8.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r8.name);\n  }\n}\nfunction EditPetComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Pet Type is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditPetComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, EditPetComponent_div_14_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.editForm.get(\"petTypeId\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nfunction EditPetComponent_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const breed_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", breed_r10.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(breed_r10.name);\n  }\n}\nfunction EditPetComponent_div_20_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Pet Breed is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditPetComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, EditPetComponent_div_20_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r4.editForm.get(\"petBreedId\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nfunction EditPetComponent_option_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const owner_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", owner_r12.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(owner_r12.name);\n  }\n}\nfunction EditPetComponent_div_26_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Owner is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditPetComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, EditPetComponent_div_26_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r6.editForm.get(\"ownerId\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nexport class EditPetComponent {\n  constructor(formBuilder, route, router, petService, petTypeService, petBreedService, ownerService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.petService = petService;\n    this.petTypeService = petTypeService;\n    this.petBreedService = petBreedService;\n    this.ownerService = ownerService;\n    this.petTypes = [];\n    this.petBreeds = [];\n    this.owners = [];\n    this.editForm = this.formBuilder.group({\n      id: [{\n        value: '',\n        disabled: true\n      }],\n      name: ['', Validators.required],\n      petTypeId: ['', Validators.required],\n      petBreedId: ['', Validators.required],\n      ownerId: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.petId = this.route.snapshot.params['id'];\n    this.loadPet();\n    this.loadPetTypes();\n    this.loadPetBreeds();\n    this.loadOwners();\n  }\n  loadPet() {\n    this.petService.getPet(this.petId).subscribe(pet => {\n      this.editForm.patchValue({\n        id: pet.id,\n        name: pet.name,\n        petTypeId: pet.petTypeId,\n        petBreedId: pet.petBreedId,\n        ownerId: pet.petOwnerId\n      });\n    });\n  }\n  loadPetTypes() {\n    this.petTypeService.getAllPetTypes().subscribe(types => {\n      this.petTypes = types;\n    });\n  }\n  loadPetBreeds() {\n    this.petBreedService.getAllPetBreeds().subscribe(breeds => {\n      this.petBreeds = breeds;\n    });\n  }\n  loadOwners() {\n    this.ownerService.getAllPetOwners().subscribe(owners => {\n      this.owners = owners;\n    });\n  }\n  onSubmit() {\n    if (this.editForm.valid) {\n      const pet = {\n        id: this.petId,\n        name: this.editForm.get('name')?.value,\n        petTypeId: this.editForm.get('petTypeId')?.value,\n        petBreedId: this.editForm.get('petBreedId')?.value,\n        petOwnerId: this.editForm.get('ownerId')?.value\n      };\n      this.petService.updatePet(pet).subscribe(() => {\n        alert(\"Update Pets Successfully!!\");\n        this.router.navigate(['/pets']);\n      });\n    } else {\n      this.markFormGroupTouched(this.editForm);\n    }\n  }\n  markFormGroupTouched(formGroup) {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.get(key);\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function EditPetComponent_Factory(t) {\n    return new (t || EditPetComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.PetService), i0.ɵɵdirectiveInject(i4.PetTypeService), i0.ɵɵdirectiveInject(i5.PetBreedService), i0.ɵɵdirectiveInject(i6.PetOwnerService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditPetComponent,\n    selectors: [[\"app-edit-pet\"]],\n    decls: 31,\n    vars: 9,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"petTypeId\"], [\"id\", \"petTypeId\", \"formControlName\", \"petTypeId\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"petBreedId\"], [\"id\", \"petBreedId\", \"formControlName\", \"petBreedId\", 1, \"form-control\"], [\"for\", \"ownerId\"], [\"id\", \"ownerId\", \"formControlName\", \"ownerId\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-2\", 3, \"disabled\"], [\"routerLink\", \"/pets\", 1, \"btn\", \"btn-outline-secondary\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [3, \"value\"]],\n    template: function EditPetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Edit Pet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function EditPetComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, EditPetComponent_div_8_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 6);\n        i0.ɵɵtext(11, \"Pet Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"select\", 7);\n        i0.ɵɵtemplate(13, EditPetComponent_option_13_Template, 2, 2, \"option\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, EditPetComponent_div_14_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 2)(16, \"label\", 9);\n        i0.ɵɵtext(17, \"Pet Breed\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"select\", 10);\n        i0.ɵɵtemplate(19, EditPetComponent_option_19_Template, 2, 2, \"option\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(20, EditPetComponent_div_20_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 2)(22, \"label\", 11);\n        i0.ɵɵtext(23, \"Owner\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"select\", 12);\n        i0.ɵɵtemplate(25, EditPetComponent_option_25_Template, 2, 2, \"option\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, EditPetComponent_div_26_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"button\", 13);\n        i0.ɵɵtext(28, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"a\", 14);\n        i0.ɵɵtext(30, \"Cancel\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_3_0;\n        let tmp_5_0;\n        let tmp_7_0;\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.editForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.editForm.get(\"name\")) == null ? null : tmp_1_0.invalid) && (((tmp_1_0 = ctx.editForm.get(\"name\")) == null ? null : tmp_1_0.dirty) || ((tmp_1_0 = ctx.editForm.get(\"name\")) == null ? null : tmp_1_0.touched)));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.petTypes);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.editForm.get(\"petTypeId\")) == null ? null : tmp_3_0.invalid) && (((tmp_3_0 = ctx.editForm.get(\"petTypeId\")) == null ? null : tmp_3_0.dirty) || ((tmp_3_0 = ctx.editForm.get(\"petTypeId\")) == null ? null : tmp_3_0.touched)));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.petBreeds);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx.editForm.get(\"petBreedId\")) == null ? null : tmp_5_0.invalid) && (((tmp_5_0 = ctx.editForm.get(\"petBreedId\")) == null ? null : tmp_5_0.dirty) || ((tmp_5_0 = ctx.editForm.get(\"petBreedId\")) == null ? null : tmp_5_0.touched)));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.owners);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_7_0 = ctx.editForm.get(\"ownerId\")) == null ? null : tmp_7_0.invalid) && (((tmp_7_0 = ctx.editForm.get(\"ownerId\")) == null ? null : tmp_7_0.dirty) || ((tmp_7_0 = ctx.editForm.get(\"ownerId\")) == null ? null : tmp_7_0.touched)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.editForm.invalid);\n      }\n    },\n    dependencies: [i7.NgForOf, i7.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i2.RouterLink, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormGroup","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","EditPetComponent_div_8_div_1_Template","ɵɵadvance","ɵɵproperty","tmp_0_0","ctx_r0","editForm","get","errors","type_r8","id","ɵɵtextInterpolate","name","EditPetComponent_div_14_div_1_Template","ctx_r2","breed_r10","EditPetComponent_div_20_div_1_Template","ctx_r4","owner_r12","EditPetComponent_div_26_div_1_Template","ctx_r6","EditPetComponent","constructor","formBuilder","route","router","petService","petTypeService","petBreedService","ownerService","petTypes","petBreeds","owners","group","value","disabled","required","petTypeId","petBreedId","ownerId","ngOnInit","petId","snapshot","params","loadPet","loadPetTypes","loadPetBreeds","loadOwners","getPet","subscribe","pet","patchValue","petOwnerId","getAllPetTypes","types","getAllPetBreeds","breeds","getAllPetOwners","onSubmit","valid","updatePet","alert","navigate","markFormGroupTouched","formGroup","Object","keys","controls","forEach","key","control","_","ɵɵdirectiveInject","i1","FormBuilder","i2","ActivatedRoute","Router","i3","PetService","i4","PetTypeService","i5","PetBreedService","i6","PetOwnerService","_2","selectors","decls","vars","consts","template","EditPetComponent_Template","rf","ctx","ɵɵlistener","EditPetComponent_Template_form_ngSubmit_3_listener","ɵɵelement","EditPetComponent_div_8_Template","EditPetComponent_option_13_Template","EditPetComponent_div_14_Template","EditPetComponent_option_19_Template","EditPetComponent_div_20_Template","EditPetComponent_option_25_Template","EditPetComponent_div_26_Template","tmp_1_0","invalid","dirty","touched","tmp_3_0","tmp_5_0","tmp_7_0"],"sources":["E:\\pets-appoinments-app\\src\\app\\edit-pet\\edit-pet.component.ts","E:\\pets-appoinments-app\\src\\app\\edit-pet\\edit-pet.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PetRequestModel } from '../models/request.models';\nimport { PetResponseModel } from '../models/response.models';\nimport { PetService } from '../services/pet.services';\nimport { PetBreedService } from '../services/petBreed.service';\nimport { PetTypeService } from '../services/pettype.services';\nimport { PetOwnerService } from '../services/petowner.service';\n\n@Component({\n  selector: 'app-edit-pet',\n  templateUrl: './edit-pet.component.html',\n  styleUrls: ['./edit-pet.component.css']\n})\nexport class EditPetComponent implements OnInit {\n  editForm: FormGroup;\n  petTypes: any[] = [];\n  petBreeds: any[] = [];\n  owners: any[] = [];\n  petId: number;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private petService: PetService,\n    private petTypeService: PetTypeService,\n    private petBreedService: PetBreedService,\n    private ownerService: PetOwnerService\n  ) {\n    this.editForm = this.formBuilder.group({\n      id: [{ value: '', disabled: true }],\n      name: ['', Validators.required],\n      petTypeId: ['', Validators.required],\n      petBreedId: ['', Validators.required],\n      ownerId: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.petId = this.route.snapshot.params['id'];\n    this.loadPet();\n    this.loadPetTypes();\n    this.loadPetBreeds();\n    this.loadOwners();\n  }\n\n  loadPet(): void {\n    this.petService.getPet(this.petId).subscribe((pet: PetResponseModel) => {\n      this.editForm.patchValue({\n        id: pet.id,\n        name: pet.name,\n        petTypeId: pet.petTypeId,\n        petBreedId: pet.petBreedId,\n        ownerId: pet.petOwnerId\n      });\n    });\n  }\n\n  loadPetTypes(): void {\n    this.petTypeService.getAllPetTypes().subscribe(types => {\n      this.petTypes = types;\n    });\n  }\n\n  loadPetBreeds(): void {\n    this.petBreedService.getAllPetBreeds().subscribe(breeds => {\n      this.petBreeds = breeds;\n    });\n  }\n\n  loadOwners(): void {\n    this.ownerService.getAllPetOwners().subscribe(owners => {\n      this.owners = owners;\n    });\n  }\n\n  onSubmit(): void {\n    if (this.editForm.valid) {\n      const pet: PetRequestModel = {\n        id: this.petId,\n        name: this.editForm.get('name')?.value,\n        petTypeId: this.editForm.get('petTypeId')?.value,\n        petBreedId: this.editForm.get('petBreedId')?.value,\n        petOwnerId: this.editForm.get('ownerId')?.value\n      };\n\n      this.petService.updatePet(pet).subscribe(() => {\n        alert(\"Update Pets Successfully!!\");\n        this.router.navigate(['/pets']);\n      });\n    } else {\n      this.markFormGroupTouched(this.editForm);\n    }\n  }\n\n  markFormGroupTouched(formGroup: FormGroup): void {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.get(key);\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      } \n    });\n  }\n}\n","<div class=\"container\">\n    <h2>Edit Pet</h2>\n    <form [formGroup]=\"editForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label for=\"name\">Name</label>\n        <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\">\n        <div *ngIf=\"editForm.get('name')?.invalid && (editForm.get('name')?.dirty || editForm.get('name')?.touched)\"\n             class=\"invalid-feedback\">\n          <div *ngIf=\"editForm.get('name')?.errors?.['required']\">\n            Name is required.\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"petTypeId\">Pet Type</label>\n        <select id=\"petTypeId\" class=\"form-control\" formControlName=\"petTypeId\">\n          <option *ngFor=\"let type of petTypes\" [value]=\"type.id\">{{ type.name }}</option>\n        </select>\n        <div *ngIf=\"editForm.get('petTypeId')?.invalid && (editForm.get('petTypeId')?.dirty || editForm.get('petTypeId')?.touched)\"\n             class=\"invalid-feedback\">\n          <div *ngIf=\"editForm.get('petTypeId')?.errors?.['required']\">\n            Pet Type is required.\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"petBreedId\">Pet Breed</label>\n        <select id=\"petBreedId\" class=\"form-control\" formControlName=\"petBreedId\">\n          <option *ngFor=\"let breed of petBreeds\" [value]=\"breed.id\">{{ breed.name }}</option>\n        </select>\n        <div *ngIf=\"editForm.get('petBreedId')?.invalid && (editForm.get('petBreedId')?.dirty || editForm.get('petBreedId')?.touched)\"\n             class=\"invalid-feedback\">\n          <div *ngIf=\"editForm.get('petBreedId')?.errors?.['required']\">\n            Pet Breed is required.\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"ownerId\">Owner</label>\n        <select id=\"ownerId\" class=\"form-control\" formControlName=\"ownerId\">\n          <option *ngFor=\"let owner of owners\" [value]=\"owner.id\">{{ owner.name }}</option>\n        </select>\n        <div *ngIf=\"editForm.get('ownerId')?.invalid && (editForm.get('ownerId')?.dirty || editForm.get('ownerId')?.touched)\"\n             class=\"invalid-feedback\">\n          <div *ngIf=\"editForm.get('ownerId')?.errors?.['required']\">\n            Owner is required.\n          </div>\n        </div>\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary mr-2\" [disabled]=\"editForm.invalid\">Save</button>\n      <a routerLink=\"/pets\" class=\"btn btn-outline-secondary\">Cancel</a>\n    </form>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}