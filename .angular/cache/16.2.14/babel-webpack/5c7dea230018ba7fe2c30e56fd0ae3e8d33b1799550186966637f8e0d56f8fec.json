{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nexport let NewAppointmentComponent = class NewAppointmentComponent {\n  constructor(formBuilder, appointmentServices) {\n    this.formBuilder = formBuilder;\n    this.appointmentServices = appointmentServices;\n    this.owners = []; // Assuming you have a list of owners with 'id' and 'name'\n    this.pets = []; // Assuming you have a list of pets with 'id', 'name', and 'ownerId'\n    this.owners = [{\n      id: 1,\n      name: 'Owner A'\n    }, {\n      id: 2,\n      name: 'Owner B'\n    }, {\n      id: 3,\n      name: 'Owner C'\n    }];\n    this.pets = [{\n      id: 1,\n      name: 'Pet A',\n      ownerId: 1\n    }, {\n      id: 2,\n      name: 'Pet B',\n      ownerId: 1\n    }, {\n      id: 3,\n      name: 'Pet C',\n      ownerId: 2\n    }, {\n      id: 4,\n      name: 'Pet D',\n      ownerId: 2\n    }, {\n      id: 5,\n      name: 'Pet E',\n      ownerId: 3\n    }];\n  }\n  ngOnInit() {\n    this.buildForm();\n  }\n  buildForm() {\n    this.newForm = this.formBuilder.group({\n      petName: ['', Validators.required],\n      ownerName: ['', Validators.required],\n      date: ['', Validators.required],\n      reason: ['', Validators.required]\n    });\n  }\n  onChangeOwner() {\n    const ownerId = this.newForm.get('ownerId')?.value;\n    if (ownerId) {\n      this.pets = this.pets.filter(pet => pet.ownerId === ownerId);\n    } else {\n      // Handle the case where ownerId is null or undefined if needed\n      this.pets = []; // Reset pets list or handle differently\n    }\n  }\n\n  onSubmit() {\n    if (this.newForm.valid) {\n      // Call createAppointment method from AppointmentService\n      this.appointmentServices.createAppointment(this.newForm.value).subscribe(response => {\n        console.log('Appointment created successfully!', response);\n        this.newForm.reset();\n      }, error => {\n        console.error('Error creating appointment:', error);\n      });\n    } else {\n      // Mark all form fields as touched to trigger validation messages\n      this.markFormGroupTouched(this.newForm);\n    }\n  }\n  markFormGroupTouched(formGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n  // Getter methods to simplify access to form controls in the template\n  get petName() {\n    return this.newForm.get('petName');\n  }\n  get ownerName() {\n    return this.newForm.get('ownerName');\n  }\n  get date() {\n    return this.newForm.get('date');\n  }\n  get reason() {\n    return this.newForm.get('reason');\n  }\n};\nNewAppointmentComponent = __decorate([Component({\n  selector: 'app-new-appointment',\n  templateUrl: './new-appointment.component.html',\n  styleUrls: ['./new-appointment.component.css']\n})], NewAppointmentComponent);","map":{"version":3,"names":["Component","FormGroup","Validators","NewAppointmentComponent","constructor","formBuilder","appointmentServices","owners","pets","id","name","ownerId","ngOnInit","buildForm","newForm","group","petName","required","ownerName","date","reason","onChangeOwner","get","value","filter","pet","onSubmit","valid","createAppointment","subscribe","response","console","log","reset","error","markFormGroupTouched","formGroup","Object","values","controls","forEach","control","markAsTouched","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\pets-appoinments-app\\src\\app\\new-appointment\\new-appointment.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-new-appointment',\n  templateUrl: './new-appointment.component.html',\n  styleUrls: ['./new-appointment.component.css']\n})\nexport class NewAppointmentComponent implements OnInit {\n  newForm!: FormGroup ;\n  owners: any[] = []; // Assuming you have a list of owners with 'id' and 'name'\n  pets: any[] = []; // Assuming you have a list of pets with 'id', 'name', and 'ownerId'\n\n  constructor(private formBuilder: FormBuilder, private appointmentServices :   ) {\n    this.owners = [\n      { id: 1, name: 'Owner A' },\n      { id: 2, name: 'Owner B' },\n      { id: 3, name: 'Owner C' }\n    ];\n    this.pets = [\n      { id: 1, name: 'Pet A', ownerId: 1 },\n      { id: 2, name: 'Pet B', ownerId: 1 },\n      { id: 3, name: 'Pet C', ownerId: 2 },\n      { id: 4, name: 'Pet D', ownerId: 2 },\n      { id: 5, name: 'Pet E', ownerId: 3 }\n    ];\n  }\n\n  ngOnInit(): void {\n    this.buildForm();\n  }\n\n  buildForm(): void {\n    this.newForm = this.formBuilder.group({\n      petName: ['', Validators.required],\n      ownerName: ['', Validators.required],\n      date: ['', Validators.required],\n      reason: ['', Validators.required]\n    });\n  }\n\n  onChangeOwner() {\n    const ownerId = this.newForm.get('ownerId')?.value;\n    if (ownerId) {\n      this.pets = this.pets.filter(pet => pet.ownerId === ownerId);\n    } else {\n      // Handle the case where ownerId is null or undefined if needed\n      this.pets = []; // Reset pets list or handle differently\n    }\n  }\n\n \n\n  onSubmit(): void {\n    if (this.newForm.valid) {\n      // Call createAppointment method from AppointmentService\n      this.appointmentServices.createAppointment(this.newForm.value).subscribe(\n        (response) => {\n          console.log('Appointment created successfully!', response);\n          this.newForm.reset();\n        },\n        (error) => {\n          console.error('Error creating appointment:', error);\n        }\n      );\n    } else {\n      // Mark all form fields as touched to trigger validation messages\n      this.markFormGroupTouched(this.newForm);\n    }\n  }\n\n  markFormGroupTouched(formGroup: FormGroup): void {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  // Getter methods to simplify access to form controls in the template\n  get petName() {\n    return this.newForm.get('petName');\n  }\n\n  get ownerName() {\n    return this.newForm.get('ownerName');\n  }\n\n  get date() {\n    return this.newForm.get('date');\n  }\n\n  get reason() {\n    return this.newForm.get('reason');\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}