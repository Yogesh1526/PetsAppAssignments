{"ast":null,"code":"import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { booleanAttribute, numberAttribute, Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends CdkTreeNode {\n  constructor(elementRef, tree, tabIndex) {\n    super(elementRef, tree);\n    /** Whether the node is disabled. */\n    this.disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n  static #_ = this.ɵfac = function MatTreeNode_Factory(t) {\n    return new (t || MatTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵinjectAttribute('tabindex'));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNode,\n    selectors: [[\"mat-tree-node\"]],\n    hostAttrs: [1, \"mat-tree-node\"],\n    inputs: {\n      disabled: [\"disabled\", \"disabled\", booleanAttribute],\n      tabIndex: [\"tabIndex\", \"tabIndex\", value => value == null ? 0 : numberAttribute(value)]\n    },\n    exportAs: [\"matTreeNode\"],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: MatTreeNode\n    }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }],\n      host: {\n        'class': 'mat-tree-node'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1.CdkTree\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }], {\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    tabIndex: [{\n      type: Input,\n      args: [{\n        transform: value => value == null ? 0 : numberAttribute(value)\n      }]\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatTreeNodeDef_BaseFactory;\n    return function MatTreeNodeDef_Factory(t) {\n      return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodeDef,\n    selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"matTreeNodeDefWhen\", \"when\"],\n      data: [\"matTreeNode\", \"data\"]\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeDef,\n      useExisting: MatTreeNodeDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: [{\n        name: 'when',\n        alias: 'matTreeNodeDefWhen'\n      }],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }],\n      standalone: true\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  /** Tabindex for the node. */\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  constructor(elementRef, tree, differs, tabIndex) {\n    super(elementRef, tree, differs);\n    /** Whether the node is disabled. */\n    this.disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n  static #_ = this.ɵfac = function MatNestedTreeNode_Factory(t) {\n    return new (t || MatNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵinjectAttribute('tabindex'));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatNestedTreeNode,\n    selectors: [[\"mat-nested-tree-node\"]],\n    hostAttrs: [1, \"mat-nested-tree-node\"],\n    inputs: {\n      node: [\"matNestedTreeNode\", \"node\"],\n      disabled: [\"disabled\", \"disabled\", booleanAttribute],\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matNestedTreeNode\"],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkNestedTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CdkTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CDK_TREE_NODE_OUTLET_NODE,\n      useExisting: MatNestedTreeNode\n    }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }],\n      host: {\n        'class': 'mat-nested-tree-node'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1.CdkTree\n  }, {\n    type: i0.IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }], {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    tabIndex: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  get indent() {\n    return this._indent;\n  }\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatTreeNodePadding_BaseFactory;\n    return function MatTreeNodePadding_Factory(t) {\n      return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodePadding,\n    selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"matTreeNodePadding\", \"level\", numberAttribute],\n      indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodePadding,\n      useExisting: MatTreeNodePadding\n    }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }],\n      standalone: true\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: [{\n        alias: 'matTreeNodePadding',\n        transform: numberAttribute\n      }]\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n  static #_ = this.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n    return new (t || MatTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodeOutlet,\n    selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeOutlet,\n      useExisting: MatTreeNodeOutlet\n    }])]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }],\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TREE_NODE_OUTLET_NODE]\n    }, {\n      type: Optional\n    }]\n  }], null);\n})();\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n  constructor() {\n    super(...arguments);\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n    this._nodeOutlet = undefined;\n  }\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatTree_BaseFactory;\n    return function MatTree_Factory(t) {\n      return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = i0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n    };\n  }();\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatTree,\n    selectors: [[\"mat-tree\"]],\n    viewQuery: function MatTree_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n    exportAs: [\"matTree\"],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTree,\n      useExisting: MatTree\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"matTreeNodeOutlet\", \"\"]],\n    template: function MatTree_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [MatTreeNodeOutlet],\n    styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color)}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color);font-family:var(--mat-tree-node-text-font);font-size:var(--mat-tree-node-text-size);font-weight:var(--mat-tree-node-text-weight)}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      standalone: true,\n      imports: [MatTreeNodeOutlet],\n      styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color)}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color);font-family:var(--mat-tree-node-text-font);font-size:var(--mat-tree-node-text-size);font-weight:var(--mat-tree-node-text-weight)}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatTreeNodeToggle_BaseFactory;\n    return function MatTreeNodeToggle_Factory(t) {\n      return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTreeNodeToggle,\n    selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n    inputs: {\n      recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeToggle,\n      useExisting: MatTreeNodeToggle\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }],\n      inputs: [{\n        name: 'recursive',\n        alias: 'matTreeNodeToggleRecursive'\n      }],\n      standalone: true\n    }]\n  }], null, null);\n})();\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nclass MatTreeModule {\n  static #_ = this.ɵfac = function MatTreeModule_Factory(t) {\n    return new (t || MatTreeModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatTreeModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CdkTreeModule, MatCommonModule, MatCommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule, ...MAT_TREE_DIRECTIVES],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES]\n    }]\n  }], null, null);\n})();\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n  constructor(_treeControl, _treeFlattener, initialData) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject([]);\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n  connect(collectionViewer) {\n    return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   */\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n  }\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"names":["i1","CdkTreeNode","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTree","CdkTreeNodeToggle","CdkTreeModule","i0","booleanAttribute","numberAttribute","Directive","Attribute","Input","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","MatCommonModule","DataSource","BehaviorSubject","merge","take","map","MatTreeNode","constructor","elementRef","tree","tabIndex","disabled","Number","ngOnInit","ngOnDestroy","_","ɵfac","MatTreeNode_Factory","t","ɵɵdirectiveInject","ElementRef","ɵɵinjectAttribute","_2","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","value","exportAs","standalone","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","ɵɵInheritDefinitionFeature","ngDevMode","ɵsetClassMetadata","args","selector","providers","host","undefined","decorators","transform","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","name","alias","MatNestedTreeNode","_tabIndex","differs","ngAfterContentInit","MatNestedTreeNode_Factory","IterableDiffers","node","MatTreeNodePadding","level","_level","_setLevelInput","indent","_indent","_setIndentInput","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","MatTreeNodeOutlet","viewContainer","_node","MatTreeNodeOutlet_Factory","ViewContainerRef","MatTree","arguments","_nodeOutlet","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","ɵɵStandaloneFeature","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","dependencies","styles","encapsulation","None","changeDetection","Default","imports","static","MatTreeNodeToggle","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","recursive","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","exports","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_data","next","_flattenedData","_treeFlattener","_treeControl","dataNodes","initialData","_expandedData","connect","collectionViewer","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource"],"sources":["E:/pets-appoinments-app/node_modules/@angular/material/fesm2022/tree.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { booleanAttribute, numberAttribute, Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        /** Whether the node is disabled. */\n        this.disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.0\", type: MatTreeNode, isStandalone: true, selector: \"mat-tree-node\", inputs: { disabled: [\"disabled\", \"disabled\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))] }, host: { classAttribute: \"mat-tree-node\" }, providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }], exportAs: [\"matTreeNode\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-tree-node',\n                    exportAs: 'matTreeNode',\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }],\n                    host: {\n                        'class': 'mat-tree-node',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }] } });\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNodeDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.0.0\", type: MatTreeNodeDef, isStandalone: true, selector: \"[matTreeNodeDef]\", inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeDef]',\n                    inputs: [{ name: 'when', alias: 'matTreeNodeDefWhen' }],\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }],\n                    standalone: true,\n                }]\n        }], propDecorators: { data: [{\n                type: Input,\n                args: ['matTreeNode']\n            }] } });\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /** Tabindex for the node. */\n    get tabIndex() {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        /** Whether the node is disabled. */\n        this.disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i0.IterableDiffers }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.0\", type: MatNestedTreeNode, isStandalone: true, selector: \"mat-nested-tree-node\", inputs: { node: [\"matNestedTreeNode\", \"node\"], disabled: [\"disabled\", \"disabled\", booleanAttribute], tabIndex: \"tabIndex\" }, host: { classAttribute: \"mat-nested-tree-node\" }, providers: [\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n        ], exportAs: [\"matNestedTreeNode\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-nested-tree-node',\n                    exportAs: 'matNestedTreeNode',\n                    providers: [\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n                    ],\n                    host: {\n                        'class': 'mat-nested-tree-node',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { node: [{\n                type: Input,\n                args: ['matNestedTreeNode']\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input\n            }] } });\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNodePadding, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.0.0\", type: MatTreeNodePadding, isStandalone: true, selector: \"[matTreeNodePadding]\", inputs: { level: [\"matTreeNodePadding\", \"level\", numberAttribute], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }],\n                    standalone: true,\n                }]\n        }], propDecorators: { level: [{\n                type: Input,\n                args: [{ alias: 'matTreeNodePadding', transform: numberAttribute }]\n            }], indent: [{\n                type: Input,\n                args: ['matTreeNodePaddingIndent']\n            }] } });\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.0.0\", type: MatTreeNodeOutlet, isStandalone: true, selector: \"[matTreeNodeOutlet]\", providers: [\n            {\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet,\n            },\n        ], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeOutlet]',\n                    providers: [\n                        {\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: MatTreeNodeOutlet,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TREE_NODE_OUTLET_NODE]\n                }, {\n                    type: Optional\n                }] }] });\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n    constructor() {\n        super(...arguments);\n        // Outlets within the tree's template where the dataNodes will be inserted.\n        // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n        this._nodeOutlet = undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTree, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.0\", type: MatTree, isStandalone: true, selector: \"mat-tree\", host: { attributes: { \"role\": \"tree\" }, classAttribute: \"mat-tree\" }, providers: [{ provide: CdkTree, useExisting: MatTree }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: MatTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"matTree\"], usesInheritance: true, ngImport: i0, template: `<ng-container matTreeNodeOutlet></ng-container>`, isInline: true, styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color)}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color);font-family:var(--mat-tree-node-text-font);font-size:var(--mat-tree-node-text-size);font-weight:var(--mat-tree-node-text-weight)}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"], dependencies: [{ kind: \"directive\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTree, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                        'class': 'mat-tree',\n                        'role': 'tree',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], standalone: true, imports: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color)}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color);font-family:var(--mat-tree-node-text-font);font-size:var(--mat-tree-node-text-size);font-weight:var(--mat-tree-node-text-weight)}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"] }]\n        }], propDecorators: { _nodeOutlet: [{\n                type: ViewChild,\n                args: [MatTreeNodeOutlet, { static: true }]\n            }] } });\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNodeToggle, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.0.0\", type: MatTreeNodeToggle, isStandalone: true, selector: \"[matTreeNodeToggle]\", inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }],\n                    inputs: [{ name: 'recursive', alias: 'matTreeNodeToggleRecursive' }],\n                    standalone: true,\n                }]\n        }] });\n\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet,\n];\nclass MatTreeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeModule, imports: [CdkTreeModule, MatCommonModule, MatNestedTreeNode,\n            MatTreeNodeDef,\n            MatTreeNodePadding,\n            MatTreeNodeToggle,\n            MatTree,\n            MatTreeNode,\n            MatTreeNodeOutlet], exports: [MatCommonModule, MatNestedTreeNode,\n            MatTreeNodeDef,\n            MatTreeNodePadding,\n            MatTreeNodeToggle,\n            MatTree,\n            MatTreeNode,\n            MatTreeNodeOutlet] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeModule, imports: [CdkTreeModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: MatTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTreeModule, MatCommonModule, ...MAT_TREE_DIRECTIVES],\n                    exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                }]\n        }] });\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n    }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,mBAAmB;AACvC,SAASC,WAAW,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,yBAAyB,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,aAAa,QAAQ,mBAAmB;AAC/L,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,gBAAgB,EAAEC,eAAe,EAAEC,SAAS,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AAC5L,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SAASC,eAAe,EAAEC,KAAK,QAAQ,MAAM;AAC7C,SAASC,IAAI,EAAEC,GAAG,QAAQ,gBAAgB;;AAE1C;AACA;AACA;AACA,MAAMC,WAAW,SAAS5B,WAAW,CAAC;EAClC6B,WAAWA,CAACC,UAAU,EAAEC,IAAI,EAAEC,QAAQ,EAAE;IACpC,KAAK,CAACF,UAAU,EAAEC,IAAI,CAAC;IACvB;IACA,IAAI,CAACE,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACD,QAAQ,GAAGE,MAAM,CAACF,QAAQ,CAAC,IAAI,CAAC;EACzC;EACA;EACA;EACAG,QAAQA,CAAA,EAAG;IACP,KAAK,CAACA,QAAQ,CAAC,CAAC;EACpB;EACAC,WAAWA,CAAA,EAAG;IACV,KAAK,CAACA,WAAW,CAAC,CAAC;EACvB;EAAC,QAAAC,CAAA,GACQ,IAAI,CAACC,IAAI,YAAAC,oBAAAC,CAAA;IAAA,YAAAA,CAAA,IAAwFZ,WAAW,EAArBnB,EAAE,CAAAgC,iBAAA,CAAqChC,EAAE,CAACiC,UAAU,GAApDjC,EAAE,CAAAgC,iBAAA,CAA+D1C,EAAE,CAACO,OAAO,GAA3EG,EAAE,CAAAkC,iBAAA,CAAsF,UAAU;EAAA,CAA6D;EAAA,QAAAC,EAAA,GACtP,IAAI,CAACC,IAAI,kBAD8EpC,EAAE,CAAAqC,iBAAA;IAAAC,IAAA,EACJnB,WAAW;IAAAoB,SAAA;IAAAC,SAAA;IAAAC,MAAA;MAAAjB,QAAA,2BAA8FvB,gBAAgB;MAAAsB,QAAA,2BAAuCmB,KAAK,IAAMA,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGxC,eAAe,CAACwC,KAAK,CAAE;IAAA;IAAAC,QAAA;IAAAC,UAAA;IAAAC,QAAA,GADpN7C,EAAE,CAAA8C,kBAAA,CAC6Q,CAAC;MAAEC,OAAO,EAAExD,WAAW;MAAEyD,WAAW,EAAE7B;IAAY,CAAC,CAAC,GADnUnB,EAAE,CAAAiD,wBAAA,EAAFjD,EAAE,CAAAkD,0BAAA;EAAA,EACoY;AAC1e;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAHoGnD,EAAE,CAAAoD,iBAAA,CAGXjC,WAAW,EAAc,CAAC;IACzGmB,IAAI,EAAEnC,SAAS;IACfkD,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,eAAe;MACzBX,QAAQ,EAAE,aAAa;MACvBY,SAAS,EAAE,CAAC;QAAER,OAAO,EAAExD,WAAW;QAAEyD,WAAW,EAAE7B;MAAY,CAAC,CAAC;MAC/DqC,IAAI,EAAE;QACF,OAAO,EAAE;MACb,CAAC;MACDZ,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEN,IAAI,EAAEtC,EAAE,CAACiC;EAAW,CAAC,EAAE;IAAEK,IAAI,EAAEhD,EAAE,CAACO;EAAQ,CAAC,EAAE;IAAEyC,IAAI,EAAEmB,SAAS;IAAEC,UAAU,EAAE,CAAC;MAC9FpB,IAAI,EAAElC,SAAS;MACfiD,IAAI,EAAE,CAAC,UAAU;IACrB,CAAC;EAAE,CAAC,CAAC,EAAkB;IAAE7B,QAAQ,EAAE,CAAC;MACpCc,IAAI,EAAEjC,KAAK;MACXgD,IAAI,EAAE,CAAC;QAAEM,SAAS,EAAE1D;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAEsB,QAAQ,EAAE,CAAC;MACXe,IAAI,EAAEjC,KAAK;MACXgD,IAAI,EAAE,CAAC;QACCM,SAAS,EAAGjB,KAAK,IAAMA,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGxC,eAAe,CAACwC,KAAK;MACpE,CAAC;IACT,CAAC;EAAE,CAAC;AAAA;AAChB;AACA;AACA;AACA;AACA,MAAMkB,cAAc,SAASpE,cAAc,CAAC;EAAA,QAAAoC,CAAA,GAC/B,IAAI,CAACC,IAAI;IAAA,IAAAgC,2BAAA;IAAA,gBAAAC,uBAAA/B,CAAA;MAAA,QAAA8B,2BAAA,KAAAA,2BAAA,GA/B8E7D,EAAE,CAAA+D,qBAAA,CA+BQH,cAAc,IAAA7B,CAAA,IAAd6B,cAAc;IAAA;EAAA,GAAqD;EAAA,QAAAzB,EAAA,GACpK,IAAI,CAACC,IAAI,kBAhC8EpC,EAAE,CAAAqC,iBAAA;IAAAC,IAAA,EAgCJsB,cAAc;IAAArB,SAAA;IAAAE,MAAA;MAAAuB,IAAA;MAAAC,IAAA;IAAA;IAAArB,UAAA;IAAAC,QAAA,GAhCZ7C,EAAE,CAAA8C,kBAAA,CAgC0J,CAAC;MAAEC,OAAO,EAAEvD,cAAc;MAAEwD,WAAW,EAAEY;IAAe,CAAC,CAAC,GAhCtN5D,EAAE,CAAAkD,0BAAA;EAAA,EAgC4P;AAClW;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAlCoGnD,EAAE,CAAAoD,iBAAA,CAkCXQ,cAAc,EAAc,CAAC;IAC5GtB,IAAI,EAAEnC,SAAS;IACfkD,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,kBAAkB;MAC5Bb,MAAM,EAAE,CAAC;QAAEyB,IAAI,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAqB,CAAC,CAAC;MACvDZ,SAAS,EAAE,CAAC;QAAER,OAAO,EAAEvD,cAAc;QAAEwD,WAAW,EAAEY;MAAe,CAAC,CAAC;MACrEhB,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,QAAkB;IAAEqB,IAAI,EAAE,CAAC;MACrB3B,IAAI,EAAEjC,KAAK;MACXgD,IAAI,EAAE,CAAC,aAAa;IACxB,CAAC;EAAE,CAAC;AAAA;AAChB;AACA;AACA;AACA,MAAMe,iBAAiB,SAAS3E,iBAAiB,CAAC;EAC9C;EACA,IAAI8B,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC6C,SAAS;EAC9C;EACA,IAAI9C,QAAQA,CAACmB,KAAK,EAAE;IAChB;IACA,IAAI,CAAC2B,SAAS,GAAG3B,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,CAAC;EAC9C;EACAtB,WAAWA,CAACC,UAAU,EAAEC,IAAI,EAAEgD,OAAO,EAAE/C,QAAQ,EAAE;IAC7C,KAAK,CAACF,UAAU,EAAEC,IAAI,EAAEgD,OAAO,CAAC;IAChC;IACA,IAAI,CAAC9C,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACD,QAAQ,GAAGE,MAAM,CAACF,QAAQ,CAAC,IAAI,CAAC;EACzC;EACA;EACA;EACA;EACAG,QAAQA,CAAA,EAAG;IACP,KAAK,CAACA,QAAQ,CAAC,CAAC;EACpB;EACA6C,kBAAkBA,CAAA,EAAG;IACjB,KAAK,CAACA,kBAAkB,CAAC,CAAC;EAC9B;EACA5C,WAAWA,CAAA,EAAG;IACV,KAAK,CAACA,WAAW,CAAC,CAAC;EACvB;EAAC,QAAAC,CAAA,GACQ,IAAI,CAACC,IAAI,YAAA2C,0BAAAzC,CAAA;IAAA,YAAAA,CAAA,IAAwFqC,iBAAiB,EA5E3BpE,EAAE,CAAAgC,iBAAA,CA4E2ChC,EAAE,CAACiC,UAAU,GA5E1DjC,EAAE,CAAAgC,iBAAA,CA4EqE1C,EAAE,CAACO,OAAO,GA5EjFG,EAAE,CAAAgC,iBAAA,CA4E4FhC,EAAE,CAACyE,eAAe,GA5EhHzE,EAAE,CAAAkC,iBAAA,CA4E2H,UAAU;EAAA,CAA6D;EAAA,QAAAC,EAAA,GAC3R,IAAI,CAACC,IAAI,kBA7E8EpC,EAAE,CAAAqC,iBAAA;IAAAC,IAAA,EA6EJ8B,iBAAiB;IAAA7B,SAAA;IAAAC,SAAA;IAAAC,MAAA;MAAAiC,IAAA;MAAAlD,QAAA,2BAA0IvB,gBAAgB;MAAAsB,QAAA;IAAA;IAAAoB,QAAA;IAAAC,UAAA;IAAAC,QAAA,GA7EzK7C,EAAE,CAAA8C,kBAAA,CA6E+P,CACzV;MAAEC,OAAO,EAAEtD,iBAAiB;MAAEuD,WAAW,EAAEoB;IAAkB,CAAC,EAC9D;MAAErB,OAAO,EAAExD,WAAW;MAAEyD,WAAW,EAAEoB;IAAkB,CAAC,EACxD;MAAErB,OAAO,EAAErD,yBAAyB;MAAEsD,WAAW,EAAEoB;IAAkB,CAAC,CACzE,GAjF2FpE,EAAE,CAAAiD,wBAAA,EAAFjD,EAAE,CAAAkD,0BAAA;EAAA,EAiFpB;AAClF;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAnFoGnD,EAAE,CAAAoD,iBAAA,CAmFXgB,iBAAiB,EAAc,CAAC;IAC/G9B,IAAI,EAAEnC,SAAS;IACfkD,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,sBAAsB;MAChCX,QAAQ,EAAE,mBAAmB;MAC7BY,SAAS,EAAE,CACP;QAAER,OAAO,EAAEtD,iBAAiB;QAAEuD,WAAW,EAAEoB;MAAkB,CAAC,EAC9D;QAAErB,OAAO,EAAExD,WAAW;QAAEyD,WAAW,EAAEoB;MAAkB,CAAC,EACxD;QAAErB,OAAO,EAAErD,yBAAyB;QAAEsD,WAAW,EAAEoB;MAAkB,CAAC,CACzE;MACDZ,IAAI,EAAE;QACF,OAAO,EAAE;MACb,CAAC;MACDZ,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEN,IAAI,EAAEtC,EAAE,CAACiC;EAAW,CAAC,EAAE;IAAEK,IAAI,EAAEhD,EAAE,CAACO;EAAQ,CAAC,EAAE;IAAEyC,IAAI,EAAEtC,EAAE,CAACyE;EAAgB,CAAC,EAAE;IAAEnC,IAAI,EAAEmB,SAAS;IAAEC,UAAU,EAAE,CAAC;MAC5HpB,IAAI,EAAElC,SAAS;MACfiD,IAAI,EAAE,CAAC,UAAU;IACrB,CAAC;EAAE,CAAC,CAAC,EAAkB;IAAEqB,IAAI,EAAE,CAAC;MAChCpC,IAAI,EAAEjC,KAAK;MACXgD,IAAI,EAAE,CAAC,mBAAmB;IAC9B,CAAC,CAAC;IAAE7B,QAAQ,EAAE,CAAC;MACXc,IAAI,EAAEjC,KAAK;MACXgD,IAAI,EAAE,CAAC;QAAEM,SAAS,EAAE1D;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAEsB,QAAQ,EAAE,CAAC;MACXe,IAAI,EAAEjC;IACV,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA;AACA;AACA,MAAMsE,kBAAkB,SAAShF,kBAAkB,CAAC;EAChD;EACA,IAAIiF,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACC,MAAM;EACtB;EACA,IAAID,KAAKA,CAAClC,KAAK,EAAE;IACb,IAAI,CAACoC,cAAc,CAACpC,KAAK,CAAC;EAC9B;EACA;EACA,IAAIqC,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACC,OAAO;EACvB;EACA,IAAID,MAAMA,CAACA,MAAM,EAAE;IACf,IAAI,CAACE,eAAe,CAACF,MAAM,CAAC;EAChC;EAAC,QAAAnD,CAAA,GACQ,IAAI,CAACC,IAAI;IAAA,IAAAqD,+BAAA;IAAA,gBAAAC,2BAAApD,CAAA;MAAA,QAAAmD,+BAAA,KAAAA,+BAAA,GAjI8ElF,EAAE,CAAA+D,qBAAA,CAiIQY,kBAAkB,IAAA5C,CAAA,IAAlB4C,kBAAkB;IAAA;EAAA,GAAqD;EAAA,QAAAxC,EAAA,GACxK,IAAI,CAACC,IAAI,kBAlI8EpC,EAAE,CAAAqC,iBAAA;IAAAC,IAAA,EAkIJqC,kBAAkB;IAAApC,SAAA;IAAAE,MAAA;MAAAmC,KAAA,kCAAyG1E,eAAe;MAAA6E,MAAA;IAAA;IAAAnC,UAAA;IAAAC,QAAA,GAlIxI7C,EAAE,CAAA8C,kBAAA,CAkIsM,CAAC;MAAEC,OAAO,EAAEpD,kBAAkB;MAAEqD,WAAW,EAAE2B;IAAmB,CAAC,CAAC,GAlI1Q3E,EAAE,CAAAiD,wBAAA,EAAFjD,EAAE,CAAAkD,0BAAA;EAAA,EAkIgT;AACtZ;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KApIoGnD,EAAE,CAAAoD,iBAAA,CAoIXuB,kBAAkB,EAAc,CAAC;IAChHrC,IAAI,EAAEnC,SAAS;IACfkD,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,sBAAsB;MAChCC,SAAS,EAAE,CAAC;QAAER,OAAO,EAAEpD,kBAAkB;QAAEqD,WAAW,EAAE2B;MAAmB,CAAC,CAAC;MAC7E/B,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,QAAkB;IAAEgC,KAAK,EAAE,CAAC;MACtBtC,IAAI,EAAEjC,KAAK;MACXgD,IAAI,EAAE,CAAC;QAAEc,KAAK,EAAE,oBAAoB;QAAER,SAAS,EAAEzD;MAAgB,CAAC;IACtE,CAAC,CAAC;IAAE6E,MAAM,EAAE,CAAC;MACTzC,IAAI,EAAEjC,KAAK;MACXgD,IAAI,EAAE,CAAC,0BAA0B;IACrC,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA;AACA;AACA;AACA,MAAM+B,iBAAiB,CAAC;EACpBhE,WAAWA,CAACiE,aAAa,EAAEC,KAAK,EAAE;IAC9B,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;EAAC,QAAA1D,CAAA,GACQ,IAAI,CAACC,IAAI,YAAA0D,0BAAAxD,CAAA;IAAA,YAAAA,CAAA,IAAwFqD,iBAAiB,EA5J3BpF,EAAE,CAAAgC,iBAAA,CA4J2ChC,EAAE,CAACwF,gBAAgB,GA5JhExF,EAAE,CAAAgC,iBAAA,CA4J2EtC,yBAAyB;EAAA,CAA4D;EAAA,QAAAyC,EAAA,GACzP,IAAI,CAACC,IAAI,kBA7J8EpC,EAAE,CAAAqC,iBAAA;IAAAC,IAAA,EA6JJ8C,iBAAiB;IAAA7C,SAAA;IAAAK,UAAA;IAAAC,QAAA,GA7Jf7C,EAAE,CAAA8C,kBAAA,CA6J+E,CACzK;MACIC,OAAO,EAAEnD,iBAAiB;MAC1BoD,WAAW,EAAEoC;IACjB,CAAC,CACJ;EAAA,EAAiB;AAC1B;AACA;EAAA,QAAAjC,SAAA,oBAAAA,SAAA,KApKoGnD,EAAE,CAAAoD,iBAAA,CAoKXgC,iBAAiB,EAAc,CAAC;IAC/G9C,IAAI,EAAEnC,SAAS;IACfkD,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,qBAAqB;MAC/BC,SAAS,EAAE,CACP;QACIR,OAAO,EAAEnD,iBAAiB;QAC1BoD,WAAW,EAAEoC;MACjB,CAAC,CACJ;MACDxC,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEN,IAAI,EAAEtC,EAAE,CAACwF;EAAiB,CAAC,EAAE;IAAElD,IAAI,EAAEmB,SAAS;IAAEC,UAAU,EAAE,CAAC;MAC9EpB,IAAI,EAAEhC,MAAM;MACZ+C,IAAI,EAAE,CAAC3D,yBAAyB;IACpC,CAAC,EAAE;MACC4C,IAAI,EAAE/B;IACV,CAAC;EAAE,CAAC,CAAC;AAAA;;AAErB;AACA;AACA;AACA,MAAMkF,OAAO,SAAS5F,OAAO,CAAC;EAC1BuB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGsE,SAAS,CAAC;IACnB;IACA;IACA,IAAI,CAACC,WAAW,GAAGlC,SAAS;EAChC;EAAC,QAAA7B,CAAA,GACQ,IAAI,CAACC,IAAI;IAAA,IAAA+D,oBAAA;IAAA,gBAAAC,gBAAA9D,CAAA;MAAA,QAAA6D,oBAAA,KAAAA,oBAAA,GAjM8E5F,EAAE,CAAA+D,qBAAA,CAiMQ0B,OAAO,IAAA1D,CAAA,IAAP0D,OAAO;IAAA;EAAA,GAAqD;EAAA,QAAAtD,EAAA,GAC7J,IAAI,CAAC2D,IAAI,kBAlM8E9F,EAAE,CAAA+F,iBAAA;IAAAzD,IAAA,EAkMJmD,OAAO;IAAAlD,SAAA;IAAAyD,SAAA,WAAAC,cAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAlMLlG,EAAE,CAAAoG,WAAA,CAkMmPhB,iBAAiB;MAAA;MAAA,IAAAc,EAAA;QAAA,IAAAG,EAAA;QAlMtQrG,EAAE,CAAAsG,cAAA,CAAAD,EAAA,GAAFrG,EAAE,CAAAuG,WAAA,QAAAJ,GAAA,CAAAR,WAAA,GAAAU,EAAA,CAAAG,KAAA;MAAA;IAAA;IAAAhE,SAAA,WAkM6E,MAAM;IAAAG,QAAA;IAAAC,UAAA;IAAAC,QAAA,GAlMrF7C,EAAE,CAAA8C,kBAAA,CAkMgI,CAAC;MAAEC,OAAO,EAAElD,OAAO;MAAEmD,WAAW,EAAEyC;IAAQ,CAAC,CAAC,GAlM9KzF,EAAE,CAAAkD,0BAAA,EAAFlD,EAAE,CAAAyG,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,iBAAAZ,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAAFlG,EAAE,CAAA+G,kBAAA,KAkM+Z,CAAC;MAAA;IAAA;IAAAC,YAAA,GAA6gB5B,iBAAiB;IAAA6B,MAAA;IAAAC,aAAA;EAAA,EAAsI;AAC1qC;AACA;EAAA,QAAA/D,SAAA,oBAAAA,SAAA,KApMoGnD,EAAE,CAAAoD,iBAAA,CAoMXqC,OAAO,EAAc,CAAC;IACrGnD,IAAI,EAAE9B,SAAS;IACf6C,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAE,UAAU;MAAEX,QAAQ,EAAE,SAAS;MAAEkE,QAAQ,EAAG,iDAAgD;MAAErD,IAAI,EAAE;QAC3G,OAAO,EAAE,UAAU;QACnB,MAAM,EAAE;MACZ,CAAC;MAAE0D,aAAa,EAAEzG,iBAAiB,CAAC0G,IAAI;MAAEC,eAAe,EAAE1G,uBAAuB,CAAC2G,OAAO;MAAE9D,SAAS,EAAE,CAAC;QAAER,OAAO,EAAElD,OAAO;QAAEmD,WAAW,EAAEyC;MAAQ,CAAC,CAAC;MAAE7C,UAAU,EAAE,IAAI;MAAE0E,OAAO,EAAE,CAAClC,iBAAiB,CAAC;MAAE6B,MAAM,EAAE,CAAC,ocAAoc;IAAE,CAAC;EACjqB,CAAC,CAAC,QAAkB;IAAEtB,WAAW,EAAE,CAAC;MAC5BrD,IAAI,EAAE3B,SAAS;MACf0C,IAAI,EAAE,CAAC+B,iBAAiB,EAAE;QAAEmC,MAAM,EAAE;MAAK,CAAC;IAC9C,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA;AACA;AACA,MAAMC,iBAAiB,SAAS1H,iBAAiB,CAAC;EAAA,QAAA8B,CAAA,GACrC,IAAI,CAACC,IAAI;IAAA,IAAA4F,8BAAA;IAAA,gBAAAC,0BAAA3F,CAAA;MAAA,QAAA0F,8BAAA,KAAAA,8BAAA,GAnN8EzH,EAAE,CAAA+D,qBAAA,CAmNQyD,iBAAiB,IAAAzF,CAAA,IAAjByF,iBAAiB;IAAA;EAAA,GAAqD;EAAA,QAAArF,EAAA,GACvK,IAAI,CAACC,IAAI,kBApN8EpC,EAAE,CAAAqC,iBAAA;IAAAC,IAAA,EAoNJkF,iBAAiB;IAAAjF,SAAA;IAAAE,MAAA;MAAAkF,SAAA;IAAA;IAAA/E,UAAA;IAAAC,QAAA,GApNf7C,EAAE,CAAA8C,kBAAA,CAoNmJ,CAAC;MAAEC,OAAO,EAAEjD,iBAAiB;MAAEkD,WAAW,EAAEwE;IAAkB,CAAC,CAAC,GApNrNxH,EAAE,CAAAkD,0BAAA;EAAA,EAoN2P;AACjW;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAtNoGnD,EAAE,CAAAoD,iBAAA,CAsNXoE,iBAAiB,EAAc,CAAC;IAC/GlF,IAAI,EAAEnC,SAAS;IACfkD,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,qBAAqB;MAC/BC,SAAS,EAAE,CAAC;QAAER,OAAO,EAAEjD,iBAAiB;QAAEkD,WAAW,EAAEwE;MAAkB,CAAC,CAAC;MAC3E/E,MAAM,EAAE,CAAC;QAAEyB,IAAI,EAAE,WAAW;QAAEC,KAAK,EAAE;MAA6B,CAAC,CAAC;MACpEvB,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC;AAAA;AAEV,MAAMgF,mBAAmB,GAAG,CACxBxD,iBAAiB,EACjBR,cAAc,EACde,kBAAkB,EAClB6C,iBAAiB,EACjB/B,OAAO,EACPtE,WAAW,EACXiE,iBAAiB,CACpB;AACD,MAAMyC,aAAa,CAAC;EAAA,QAAAjG,CAAA,GACP,IAAI,CAACC,IAAI,YAAAiG,sBAAA/F,CAAA;IAAA,YAAAA,CAAA,IAAwF8F,aAAa;EAAA,CAAkD;EAAA,QAAA1F,EAAA,GAChK,IAAI,CAAC4F,IAAI,kBA3O8E/H,EAAE,CAAAgI,gBAAA;IAAA1F,IAAA,EA2OSuF;EAAa,EAY3F;EAAA,QAAAI,EAAA,GACpB,IAAI,CAACC,IAAI,kBAxP8ElI,EAAE,CAAAmI,gBAAA;IAAAb,OAAA,GAwPkCvH,aAAa,EAAEc,eAAe,EAAEA,eAAe;EAAA,EAAI;AAC3L;AACA;EAAA,QAAAsC,SAAA,oBAAAA,SAAA,KA1PoGnD,EAAE,CAAAoD,iBAAA,CA0PXyE,aAAa,EAAc,CAAC;IAC3GvF,IAAI,EAAE1B,QAAQ;IACdyC,IAAI,EAAE,CAAC;MACCiE,OAAO,EAAE,CAACvH,aAAa,EAAEc,eAAe,EAAE,GAAG+G,mBAAmB,CAAC;MACjEQ,OAAO,EAAE,CAACvH,eAAe,EAAE+G,mBAAmB;IAClD,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,gBAAgB,CAAC;EACnBjH,WAAWA,CAACkH,iBAAiB,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,WAAW,EAAE;IAChE,IAAI,CAACH,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACAC,YAAYA,CAAChE,IAAI,EAAEE,KAAK,EAAE+D,WAAW,EAAEC,SAAS,EAAE;IAC9C,MAAMC,QAAQ,GAAG,IAAI,CAACP,iBAAiB,CAAC5D,IAAI,EAAEE,KAAK,CAAC;IACpD+D,WAAW,CAACG,IAAI,CAACD,QAAQ,CAAC;IAC1B,IAAI,IAAI,CAACL,YAAY,CAACK,QAAQ,CAAC,EAAE;MAC7B,MAAME,aAAa,GAAG,IAAI,CAACN,WAAW,CAAC/D,IAAI,CAAC;MAC5C,IAAIqE,aAAa,EAAE;QACf,IAAIC,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,EAAE;UAC9B,IAAI,CAACG,gBAAgB,CAACH,aAAa,EAAEnE,KAAK,EAAE+D,WAAW,EAAEC,SAAS,CAAC;QACvE,CAAC,MACI;UACDG,aAAa,CAACI,IAAI,CAAClI,IAAI,CAAC,CAAC,CAAC,CAAC,CAACmI,SAAS,CAACC,QAAQ,IAAI;YAC9C,IAAI,CAACH,gBAAgB,CAACG,QAAQ,EAAEzE,KAAK,EAAE+D,WAAW,EAAEC,SAAS,CAAC;UAClE,CAAC,CAAC;QACN;MACJ;IACJ;IACA,OAAOD,WAAW;EACtB;EACAO,gBAAgBA,CAACG,QAAQ,EAAEzE,KAAK,EAAE+D,WAAW,EAAEC,SAAS,EAAE;IACtDS,QAAQ,CAACC,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAC/B,IAAIC,cAAc,GAAGb,SAAS,CAACc,KAAK,CAAC,CAAC;MACtCD,cAAc,CAACX,IAAI,CAACU,KAAK,IAAIH,QAAQ,CAACM,MAAM,GAAG,CAAC,CAAC;MACjD,IAAI,CAACjB,YAAY,CAACa,KAAK,EAAE3E,KAAK,GAAG,CAAC,EAAE+D,WAAW,EAAEc,cAAc,CAAC;IACpE,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACIG,YAAYA,CAACC,cAAc,EAAE;IACzB,IAAIlB,WAAW,GAAG,EAAE;IACpBkB,cAAc,CAACP,OAAO,CAAC5E,IAAI,IAAI,IAAI,CAACgE,YAAY,CAAChE,IAAI,EAAE,CAAC,EAAEiE,WAAW,EAAE,EAAE,CAAC,CAAC;IAC3E,OAAOA,WAAW;EACtB;EACA;AACJ;AACA;AACA;EACImB,oBAAoBA,CAACC,KAAK,EAAEC,WAAW,EAAE;IACrC,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,aAAa,GAAG,EAAE;IACtBA,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI;IACvBH,KAAK,CAACT,OAAO,CAAC5E,IAAI,IAAI;MAClB,IAAIyF,MAAM,GAAG,IAAI;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,CAAC7B,QAAQ,CAAC7D,IAAI,CAAC,EAAE0F,CAAC,EAAE,EAAE;QAC3CD,MAAM,GAAGA,MAAM,IAAID,aAAa,CAACE,CAAC,CAAC;MACvC;MACA,IAAID,MAAM,EAAE;QACRF,OAAO,CAACnB,IAAI,CAACpE,IAAI,CAAC;MACtB;MACA,IAAI,IAAI,CAAC8D,YAAY,CAAC9D,IAAI,CAAC,EAAE;QACzBwF,aAAa,CAAC,IAAI,CAAC3B,QAAQ,CAAC7D,IAAI,CAAC,GAAG,CAAC,CAAC,GAAGsF,WAAW,CAACK,UAAU,CAAC3F,IAAI,CAAC;MACzE;IACJ,CAAC,CAAC;IACF,OAAOuF,OAAO;EAClB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,qBAAqB,SAASxJ,UAAU,CAAC;EAC3C,IAAImD,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACsG,KAAK,CAAC7H,KAAK;EAC3B;EACA,IAAIuB,IAAIA,CAACvB,KAAK,EAAE;IACZ,IAAI,CAAC6H,KAAK,CAACC,IAAI,CAAC9H,KAAK,CAAC;IACtB,IAAI,CAAC+H,cAAc,CAACD,IAAI,CAAC,IAAI,CAACE,cAAc,CAACd,YAAY,CAAC,IAAI,CAAC3F,IAAI,CAAC,CAAC;IACrE,IAAI,CAAC0G,YAAY,CAACC,SAAS,GAAG,IAAI,CAACH,cAAc,CAAC/H,KAAK;EAC3D;EACAtB,WAAWA,CAACuJ,YAAY,EAAED,cAAc,EAAEG,WAAW,EAAE;IACnD,KAAK,CAAC,CAAC;IACP,IAAI,CAACF,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACD,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACD,cAAc,GAAG,IAAI1J,eAAe,CAAC,EAAE,CAAC;IAC7C,IAAI,CAAC+J,aAAa,GAAG,IAAI/J,eAAe,CAAC,EAAE,CAAC;IAC5C,IAAI,CAACwJ,KAAK,GAAG,IAAIxJ,eAAe,CAAC,EAAE,CAAC;IACpC,IAAI8J,WAAW,EAAE;MACb;MACA,IAAI,CAAC5G,IAAI,GAAG4G,WAAW;IAC3B;EACJ;EACAE,OAAOA,CAACC,gBAAgB,EAAE;IACtB,OAAOhK,KAAK,CAACgK,gBAAgB,CAACC,UAAU,EAAE,IAAI,CAACN,YAAY,CAACO,cAAc,CAACC,OAAO,EAAE,IAAI,CAACV,cAAc,CAAC,CAACtB,IAAI,CAACjI,GAAG,CAAC,MAAM;MACpH,IAAI,CAAC4J,aAAa,CAACN,IAAI,CAAC,IAAI,CAACE,cAAc,CAACZ,oBAAoB,CAAC,IAAI,CAACW,cAAc,CAAC/H,KAAK,EAAE,IAAI,CAACiI,YAAY,CAAC,CAAC;MAC/G,OAAO,IAAI,CAACG,aAAa,CAACpI,KAAK;IACnC,CAAC,CAAC,CAAC;EACP;EACA0I,UAAUA,CAAA,EAAG;IACT;EAAA;AAER;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,SAASvK,UAAU,CAAC;EAC7CM,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGsE,SAAS,CAAC;IACnB,IAAI,CAAC6E,KAAK,GAAG,IAAIxJ,eAAe,CAAC,EAAE,CAAC;EACxC;EACA;AACJ;AACA;EACI,IAAIkD,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACsG,KAAK,CAAC7H,KAAK;EAC3B;EACA,IAAIuB,IAAIA,CAACvB,KAAK,EAAE;IACZ,IAAI,CAAC6H,KAAK,CAACC,IAAI,CAAC9H,KAAK,CAAC;EAC1B;EACAqI,OAAOA,CAACC,gBAAgB,EAAE;IACtB,OAAOhK,KAAK,CAAC,GAAG,CAACgK,gBAAgB,CAACC,UAAU,EAAE,IAAI,CAACV,KAAK,CAAC,CAAC,CAACpB,IAAI,CAACjI,GAAG,CAAC,MAAM,IAAI,CAAC+C,IAAI,CAAC,CAAC;EACzF;EACAmH,UAAUA,CAAA,EAAG;IACT;EAAA;AAER;;AAEA;AACA;AACA;;AAEA,SAAShH,iBAAiB,EAAEqB,OAAO,EAAE6E,qBAAqB,EAAEjC,gBAAgB,EAAER,aAAa,EAAEwD,uBAAuB,EAAElK,WAAW,EAAEyC,cAAc,EAAEwB,iBAAiB,EAAET,kBAAkB,EAAE6C,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}