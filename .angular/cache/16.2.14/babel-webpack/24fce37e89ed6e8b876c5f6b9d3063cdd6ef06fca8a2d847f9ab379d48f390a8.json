{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/petBreed.service\";\nimport * as i4 from \"../services/pettype.services\";\nimport * as i5 from \"@angular/common\";\nfunction EditBreedComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditBreedComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, EditBreedComponent_div_8_div_1_Template, 2, 0, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.editForm.controls[\"name\"].errors == null ? null : ctx_r0.editForm.controls[\"name\"].errors[\"required\"]);\n  }\n}\nexport class EditBreedComponent {\n  constructor(fb, router, route, petBreedService, petTypeService) {\n    this.fb = fb;\n    this.router = router;\n    this.route = route;\n    this.petBreedService = petBreedService;\n    this.petTypeService = petTypeService;\n    this.petBreedId = null;\n    this.petTypes = [];\n    this.editForm = this.fb.group({\n      petTypeId: ['', Validators.required],\n      name: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.petBreedId = +this.route.snapshot.params['id']; // Convert id to a number if needed\n    this.loadPetTypes();\n    this.loadPetBreed();\n  }\n  loadPetTypes() {\n    this.petTypeService.getAllPetTypes().subscribe(petTypes => {\n      this.petTypes = petTypes;\n    }, error => {\n      console.error('Error fetching pet types:', error);\n      // Handle error appropriately, e.g., show error message to the user\n    });\n  }\n\n  loadPetBreed() {\n    if (this.petBreedId) {\n      this.petBreedService.getPetBreed(this.petBreedId).subscribe(petBreed => {\n        if (petBreed) {\n          this.editForm.patchValue({\n            petTypeId: petBreed.petTypeId,\n            name: petBreed.name\n          });\n        }\n      }, error => {\n        console.error('Error fetching pet breed:', error);\n        // Handle error appropriately, e.g., show error message to the user\n      });\n    }\n  }\n\n  onSubmit() {\n    if (this.editForm.valid && this.petBreedId) {\n      const petTypeId = this.editForm.value.petTypeId;\n      const name = this.editForm.value.name;\n      // Prepare request object\n      const updateBreedRequest = {\n        id: this.petBreedId,\n        petTypeId: petTypeId,\n        name: name\n      };\n      // Call service to update breed\n      this.petBreedService.updatePetBreed(updateBreedRequest).subscribe(() => {\n        console.log('Breed updated successfully');\n        alert('Breed updated successfully');\n        this.router.navigate(['/breeds']);\n      }, error => {\n        console.error('Error updating breed:', error);\n        alert('Failed to update breed');\n      });\n    } else {\n      // Mark all fields as touched to display validation errors\n      this.editForm.markAllAsTouched();\n    }\n  }\n  static #_ = this.ɵfac = function EditBreedComponent_Factory(t) {\n    return new (t || EditBreedComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.PetBreedService), i0.ɵɵdirectiveInject(i4.PetTypeService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditBreedComponent,\n    selectors: [[\"app-edit-breed\"]],\n    decls: 13,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-2\", 3, \"disabled\"], [\"routerLink\", \"/breeds\", 1, \"btn\", \"btn-outline-secondary\"], [1, \"invalid-feedback\"], [4, \"ngIf\"]],\n    template: function EditBreedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Edit Breed\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function EditBreedComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, EditBreedComponent_div_8_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 6);\n        i0.ɵɵtext(10, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"a\", 7);\n        i0.ɵɵtext(12, \"Cancel\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.editForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.editForm.controls[\"name\"].invalid && (ctx.editForm.controls[\"name\"].dirty || ctx.editForm.controls[\"name\"].touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.editForm.invalid);\n      }\n    },\n    dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i2.RouterLink, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","EditBreedComponent_div_8_div_1_Template","ɵɵadvance","ɵɵproperty","ctx_r0","editForm","controls","errors","EditBreedComponent","constructor","fb","router","route","petBreedService","petTypeService","petBreedId","petTypes","group","petTypeId","required","name","ngOnInit","snapshot","params","loadPetTypes","loadPetBreed","getAllPetTypes","subscribe","error","console","getPetBreed","petBreed","patchValue","onSubmit","valid","value","updateBreedRequest","id","updatePetBreed","log","alert","navigate","markAllAsTouched","_","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","ActivatedRoute","i3","PetBreedService","i4","PetTypeService","_2","selectors","decls","vars","consts","template","EditBreedComponent_Template","rf","ctx","ɵɵlistener","EditBreedComponent_Template_form_ngSubmit_3_listener","ɵɵelement","EditBreedComponent_div_8_Template","invalid","dirty","touched"],"sources":["E:\\pets-appoinments-app\\src\\app\\edit-breed\\edit-breed.component.ts","E:\\pets-appoinments-app\\src\\app\\edit-breed\\edit-breed.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { PetBreedResponseModel, PetTypeResponseModel } from '../models/response.models';\nimport { PetBreedService } from '../services/petBreed.service';\nimport { PetTypeService } from '../services/pettype.services';\n\n@Component({\n  selector: 'app-edit-breed',\n  templateUrl: './edit-breed.component.html',\n  styleUrls: ['./edit-breed.component.css']\n})\nexport class EditBreedComponent implements OnInit {\n  editForm: FormGroup;\n  petBreedId: number | null = null;\n  petTypes: PetTypeResponseModel[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private petBreedService: PetBreedService,\n    private petTypeService: PetTypeService\n  ) {\n    this.editForm = this.fb.group({\n      petTypeId: ['', Validators.required],\n      name: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.petBreedId = +this.route.snapshot.params['id']; // Convert id to a number if needed\n\n    this.loadPetTypes();\n    this.loadPetBreed();\n  }\n\n  loadPetTypes(): void {\n    this.petTypeService.getAllPetTypes().subscribe(\n      (petTypes: PetTypeResponseModel[]) => {\n        this.petTypes = petTypes;\n      },\n      (error) => {\n        console.error('Error fetching pet types:', error);\n        // Handle error appropriately, e.g., show error message to the user\n      }\n    );\n  }\n\n  loadPetBreed(): void {\n    if (this.petBreedId) {\n      this.petBreedService.getPetBreed(this.petBreedId).subscribe(\n        (petBreed: PetBreedResponseModel) => {\n          if (petBreed) {\n            this.editForm.patchValue({\n              petTypeId: petBreed.petTypeId,\n              name: petBreed.name\n            });\n          }\n        },\n        (error) => {\n          console.error('Error fetching pet breed:', error);\n          // Handle error appropriately, e.g., show error message to the user\n        }\n      );\n    }\n  }\n\n  onSubmit(): void {\n    if (this.editForm.valid && this.petBreedId) {\n      const petTypeId = this.editForm.value.petTypeId;\n      const name = this.editForm.value.name;\n\n      // Prepare request object\n      const updateBreedRequest = {\n        id: this.petBreedId,\n        petTypeId: petTypeId,\n        name: name\n      };\n\n      // Call service to update breed\n      this.petBreedService.updatePetBreed(updateBreedRequest).subscribe(\n        () => {\n          console.log('Breed updated successfully');\n          alert('Breed updated successfully');\n          this.router.navigate(['/breeds']);\n        },\n        (error) => {\n          console.error('Error updating breed:', error);\n          alert('Failed to update breed');\n        }\n      );\n    } else {\n      // Mark all fields as touched to display validation errors\n      this.editForm.markAllAsTouched();\n    }\n  }\n}\n","<div class=\"container\">\n    <h2>Edit Breed</h2>\n    <form [formGroup]=\"editForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label for=\"name\">Name</label>\n        <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\">\n        <div *ngIf=\"editForm.controls['name'].invalid && (editForm.controls['name'].dirty || editForm.controls['name'].touched)\" class=\"invalid-feedback\">\n          <div *ngIf=\"editForm.controls['name'].errors?.['required']\">\n            Name is required.\n          </div>\n        </div>\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary mr-2\" [disabled]=\"editForm.invalid\">Save</button>\n      <a routerLink=\"/breeds\" class=\"btn btn-outline-secondary\">Cancel</a>\n    </form>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}